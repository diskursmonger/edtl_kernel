/**
 * generated by Xtext 2.34.0
 */
package su.nsk.iae.edtl.edtl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import su.nsk.iae.edtl.edtl.CrossVarAbbr;
import su.nsk.iae.edtl.edtl.EdtlPackage;
import su.nsk.iae.edtl.edtl.Expression;
import su.nsk.iae.edtl.edtl.Macros;
import su.nsk.iae.edtl.edtl.ParamAssignmentElements;
import su.nsk.iae.edtl.edtl.PrimaryExpression;
import su.nsk.iae.edtl.edtl.TauExpression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Primary Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link su.nsk.iae.edtl.edtl.impl.PrimaryExpressionImpl#getConstant <em>Constant</em>}</li>
 *   <li>{@link su.nsk.iae.edtl.edtl.impl.PrimaryExpressionImpl#getTau <em>Tau</em>}</li>
 *   <li>{@link su.nsk.iae.edtl.edtl.impl.PrimaryExpressionImpl#getV <em>V</em>}</li>
 *   <li>{@link su.nsk.iae.edtl.edtl.impl.PrimaryExpressionImpl#getMacros <em>Macros</em>}</li>
 *   <li>{@link su.nsk.iae.edtl.edtl.impl.PrimaryExpressionImpl#getArgs <em>Args</em>}</li>
 *   <li>{@link su.nsk.iae.edtl.edtl.impl.PrimaryExpressionImpl#getNestExpr <em>Nest Expr</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PrimaryExpressionImpl extends UnExpressionImpl implements PrimaryExpression
{
  /**
   * The default value of the '{@link #getConstant() <em>Constant</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstant()
   * @generated
   * @ordered
   */
  protected static final String CONSTANT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getConstant() <em>Constant</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstant()
   * @generated
   * @ordered
   */
  protected String constant = CONSTANT_EDEFAULT;

  /**
   * The cached value of the '{@link #getTau() <em>Tau</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTau()
   * @generated
   * @ordered
   */
  protected TauExpression tau;

  /**
   * The cached value of the '{@link #getV() <em>V</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getV()
   * @generated
   * @ordered
   */
  protected CrossVarAbbr v;

  /**
   * The cached value of the '{@link #getMacros() <em>Macros</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMacros()
   * @generated
   * @ordered
   */
  protected Macros macros;

  /**
   * The cached value of the '{@link #getArgs() <em>Args</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgs()
   * @generated
   * @ordered
   */
  protected ParamAssignmentElements args;

  /**
   * The cached value of the '{@link #getNestExpr() <em>Nest Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNestExpr()
   * @generated
   * @ordered
   */
  protected Expression nestExpr;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PrimaryExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EdtlPackage.Literals.PRIMARY_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getConstant()
  {
    return constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstant(String newConstant)
  {
    String oldConstant = constant;
    constant = newConstant;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdtlPackage.PRIMARY_EXPRESSION__CONSTANT, oldConstant, constant));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TauExpression getTau()
  {
    return tau;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTau(TauExpression newTau, NotificationChain msgs)
  {
    TauExpression oldTau = tau;
    tau = newTau;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EdtlPackage.PRIMARY_EXPRESSION__TAU, oldTau, newTau);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTau(TauExpression newTau)
  {
    if (newTau != tau)
    {
      NotificationChain msgs = null;
      if (tau != null)
        msgs = ((InternalEObject)tau).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EdtlPackage.PRIMARY_EXPRESSION__TAU, null, msgs);
      if (newTau != null)
        msgs = ((InternalEObject)newTau).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EdtlPackage.PRIMARY_EXPRESSION__TAU, null, msgs);
      msgs = basicSetTau(newTau, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdtlPackage.PRIMARY_EXPRESSION__TAU, newTau, newTau));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CrossVarAbbr getV()
  {
    if (v != null && v.eIsProxy())
    {
      InternalEObject oldV = (InternalEObject)v;
      v = (CrossVarAbbr)eResolveProxy(oldV);
      if (v != oldV)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, EdtlPackage.PRIMARY_EXPRESSION__V, oldV, v));
      }
    }
    return v;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CrossVarAbbr basicGetV()
  {
    return v;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setV(CrossVarAbbr newV)
  {
    CrossVarAbbr oldV = v;
    v = newV;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdtlPackage.PRIMARY_EXPRESSION__V, oldV, v));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Macros getMacros()
  {
    if (macros != null && macros.eIsProxy())
    {
      InternalEObject oldMacros = (InternalEObject)macros;
      macros = (Macros)eResolveProxy(oldMacros);
      if (macros != oldMacros)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, EdtlPackage.PRIMARY_EXPRESSION__MACROS, oldMacros, macros));
      }
    }
    return macros;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Macros basicGetMacros()
  {
    return macros;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMacros(Macros newMacros)
  {
    Macros oldMacros = macros;
    macros = newMacros;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdtlPackage.PRIMARY_EXPRESSION__MACROS, oldMacros, macros));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParamAssignmentElements getArgs()
  {
    return args;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetArgs(ParamAssignmentElements newArgs, NotificationChain msgs)
  {
    ParamAssignmentElements oldArgs = args;
    args = newArgs;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EdtlPackage.PRIMARY_EXPRESSION__ARGS, oldArgs, newArgs);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArgs(ParamAssignmentElements newArgs)
  {
    if (newArgs != args)
    {
      NotificationChain msgs = null;
      if (args != null)
        msgs = ((InternalEObject)args).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EdtlPackage.PRIMARY_EXPRESSION__ARGS, null, msgs);
      if (newArgs != null)
        msgs = ((InternalEObject)newArgs).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EdtlPackage.PRIMARY_EXPRESSION__ARGS, null, msgs);
      msgs = basicSetArgs(newArgs, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdtlPackage.PRIMARY_EXPRESSION__ARGS, newArgs, newArgs));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getNestExpr()
  {
    return nestExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNestExpr(Expression newNestExpr, NotificationChain msgs)
  {
    Expression oldNestExpr = nestExpr;
    nestExpr = newNestExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EdtlPackage.PRIMARY_EXPRESSION__NEST_EXPR, oldNestExpr, newNestExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNestExpr(Expression newNestExpr)
  {
    if (newNestExpr != nestExpr)
    {
      NotificationChain msgs = null;
      if (nestExpr != null)
        msgs = ((InternalEObject)nestExpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EdtlPackage.PRIMARY_EXPRESSION__NEST_EXPR, null, msgs);
      if (newNestExpr != null)
        msgs = ((InternalEObject)newNestExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EdtlPackage.PRIMARY_EXPRESSION__NEST_EXPR, null, msgs);
      msgs = basicSetNestExpr(newNestExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdtlPackage.PRIMARY_EXPRESSION__NEST_EXPR, newNestExpr, newNestExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EdtlPackage.PRIMARY_EXPRESSION__TAU:
        return basicSetTau(null, msgs);
      case EdtlPackage.PRIMARY_EXPRESSION__ARGS:
        return basicSetArgs(null, msgs);
      case EdtlPackage.PRIMARY_EXPRESSION__NEST_EXPR:
        return basicSetNestExpr(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EdtlPackage.PRIMARY_EXPRESSION__CONSTANT:
        return getConstant();
      case EdtlPackage.PRIMARY_EXPRESSION__TAU:
        return getTau();
      case EdtlPackage.PRIMARY_EXPRESSION__V:
        if (resolve) return getV();
        return basicGetV();
      case EdtlPackage.PRIMARY_EXPRESSION__MACROS:
        if (resolve) return getMacros();
        return basicGetMacros();
      case EdtlPackage.PRIMARY_EXPRESSION__ARGS:
        return getArgs();
      case EdtlPackage.PRIMARY_EXPRESSION__NEST_EXPR:
        return getNestExpr();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EdtlPackage.PRIMARY_EXPRESSION__CONSTANT:
        setConstant((String)newValue);
        return;
      case EdtlPackage.PRIMARY_EXPRESSION__TAU:
        setTau((TauExpression)newValue);
        return;
      case EdtlPackage.PRIMARY_EXPRESSION__V:
        setV((CrossVarAbbr)newValue);
        return;
      case EdtlPackage.PRIMARY_EXPRESSION__MACROS:
        setMacros((Macros)newValue);
        return;
      case EdtlPackage.PRIMARY_EXPRESSION__ARGS:
        setArgs((ParamAssignmentElements)newValue);
        return;
      case EdtlPackage.PRIMARY_EXPRESSION__NEST_EXPR:
        setNestExpr((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EdtlPackage.PRIMARY_EXPRESSION__CONSTANT:
        setConstant(CONSTANT_EDEFAULT);
        return;
      case EdtlPackage.PRIMARY_EXPRESSION__TAU:
        setTau((TauExpression)null);
        return;
      case EdtlPackage.PRIMARY_EXPRESSION__V:
        setV((CrossVarAbbr)null);
        return;
      case EdtlPackage.PRIMARY_EXPRESSION__MACROS:
        setMacros((Macros)null);
        return;
      case EdtlPackage.PRIMARY_EXPRESSION__ARGS:
        setArgs((ParamAssignmentElements)null);
        return;
      case EdtlPackage.PRIMARY_EXPRESSION__NEST_EXPR:
        setNestExpr((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EdtlPackage.PRIMARY_EXPRESSION__CONSTANT:
        return CONSTANT_EDEFAULT == null ? constant != null : !CONSTANT_EDEFAULT.equals(constant);
      case EdtlPackage.PRIMARY_EXPRESSION__TAU:
        return tau != null;
      case EdtlPackage.PRIMARY_EXPRESSION__V:
        return v != null;
      case EdtlPackage.PRIMARY_EXPRESSION__MACROS:
        return macros != null;
      case EdtlPackage.PRIMARY_EXPRESSION__ARGS:
        return args != null;
      case EdtlPackage.PRIMARY_EXPRESSION__NEST_EXPR:
        return nestExpr != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (constant: ");
    result.append(constant);
    result.append(')');
    return result.toString();
  }

} //PrimaryExpressionImpl
