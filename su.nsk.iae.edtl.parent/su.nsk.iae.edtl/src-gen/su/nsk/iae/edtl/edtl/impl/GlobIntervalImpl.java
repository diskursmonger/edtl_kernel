/**
 * generated by Xtext 2.34.0
 */
package su.nsk.iae.edtl.edtl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import su.nsk.iae.edtl.edtl.EdtlPackage;
import su.nsk.iae.edtl.edtl.GlobInterval;
import su.nsk.iae.edtl.edtl.TimeLiteral;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Glob Interval</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link su.nsk.iae.edtl.edtl.impl.GlobIntervalImpl#getGlobInterval <em>Glob Interval</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GlobIntervalImpl extends MinimalEObjectImpl.Container implements GlobInterval
{
  /**
   * The cached value of the '{@link #getGlobInterval() <em>Glob Interval</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGlobInterval()
   * @generated
   * @ordered
   */
  protected TimeLiteral globInterval;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GlobIntervalImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EdtlPackage.Literals.GLOB_INTERVAL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimeLiteral getGlobInterval()
  {
    return globInterval;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGlobInterval(TimeLiteral newGlobInterval, NotificationChain msgs)
  {
    TimeLiteral oldGlobInterval = globInterval;
    globInterval = newGlobInterval;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EdtlPackage.GLOB_INTERVAL__GLOB_INTERVAL, oldGlobInterval, newGlobInterval);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGlobInterval(TimeLiteral newGlobInterval)
  {
    if (newGlobInterval != globInterval)
    {
      NotificationChain msgs = null;
      if (globInterval != null)
        msgs = ((InternalEObject)globInterval).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EdtlPackage.GLOB_INTERVAL__GLOB_INTERVAL, null, msgs);
      if (newGlobInterval != null)
        msgs = ((InternalEObject)newGlobInterval).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EdtlPackage.GLOB_INTERVAL__GLOB_INTERVAL, null, msgs);
      msgs = basicSetGlobInterval(newGlobInterval, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdtlPackage.GLOB_INTERVAL__GLOB_INTERVAL, newGlobInterval, newGlobInterval));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EdtlPackage.GLOB_INTERVAL__GLOB_INTERVAL:
        return basicSetGlobInterval(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EdtlPackage.GLOB_INTERVAL__GLOB_INTERVAL:
        return getGlobInterval();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EdtlPackage.GLOB_INTERVAL__GLOB_INTERVAL:
        setGlobInterval((TimeLiteral)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EdtlPackage.GLOB_INTERVAL__GLOB_INTERVAL:
        setGlobInterval((TimeLiteral)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EdtlPackage.GLOB_INTERVAL__GLOB_INTERVAL:
        return globInterval != null;
    }
    return super.eIsSet(featureID);
  }

} //GlobIntervalImpl
