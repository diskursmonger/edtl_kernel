/*
 * generated by Xtext 2.34.0
 */
package su.nsk.iae.edtl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EdtlGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.Model");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cDeclVarInputAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cDeclVarInputDeclVarInputParserRuleCall_0_0 = (RuleCall)cDeclVarInputAssignment_0.eContents().get(0);
		private final Assignment cDeclVarOutputAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cDeclVarOutputDeclVarOutputParserRuleCall_1_0 = (RuleCall)cDeclVarOutputAssignment_1.eContents().get(0);
		private final Assignment cVarInitsAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cVarInitsVarInitParserRuleCall_2_0 = (RuleCall)cVarInitsAssignment_2.eContents().get(0);
		private final Assignment cAbbrsAssignment_3 = (Assignment)cUnorderedGroup.eContents().get(3);
		private final RuleCall cAbbrsAbbrParserRuleCall_3_0 = (RuleCall)cAbbrsAssignment_3.eContents().get(0);
		private final Assignment cMacrosesAssignment_4 = (Assignment)cUnorderedGroup.eContents().get(4);
		private final RuleCall cMacrosesMacrosParserRuleCall_4_0 = (RuleCall)cMacrosesAssignment_4.eContents().get(0);
		private final Assignment cReqsAssignment_5 = (Assignment)cUnorderedGroup.eContents().get(5);
		private final RuleCall cReqsRequirementParserRuleCall_5_0 = (RuleCall)cReqsAssignment_5.eContents().get(0);
		private final Assignment cGlobIntervalAssignment_6 = (Assignment)cUnorderedGroup.eContents().get(6);
		private final RuleCall cGlobIntervalGlobIntervalParserRuleCall_6_0 = (RuleCall)cGlobIntervalAssignment_6.eContents().get(0);
		
		//Model:
		//    (
		//        (declVarInput+=DeclVarInput)* &
		//        (declVarOutput+=DeclVarOutput)* &
		//        (varInits+=VarInit)* &
		//        (abbrs+=Abbr)* &
		//        (macroses+=Macros)* &
		//        (reqs+=Requirement)* &
		//        globInterval=GlobInterval?
		//    );
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//    (declVarInput+=DeclVarInput)* &
		//    (declVarOutput+=DeclVarOutput)* &
		//    (varInits+=VarInit)* &
		//    (abbrs+=Abbr)* &
		//    (macroses+=Macros)* &
		//    (reqs+=Requirement)* &
		//    globInterval=GlobInterval?
		//)
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//(declVarInput+=DeclVarInput)*
		public Assignment getDeclVarInputAssignment_0() { return cDeclVarInputAssignment_0; }
		
		//DeclVarInput
		public RuleCall getDeclVarInputDeclVarInputParserRuleCall_0_0() { return cDeclVarInputDeclVarInputParserRuleCall_0_0; }
		
		//(declVarOutput+=DeclVarOutput)*
		public Assignment getDeclVarOutputAssignment_1() { return cDeclVarOutputAssignment_1; }
		
		//DeclVarOutput
		public RuleCall getDeclVarOutputDeclVarOutputParserRuleCall_1_0() { return cDeclVarOutputDeclVarOutputParserRuleCall_1_0; }
		
		//(varInits+=VarInit)*
		public Assignment getVarInitsAssignment_2() { return cVarInitsAssignment_2; }
		
		//VarInit
		public RuleCall getVarInitsVarInitParserRuleCall_2_0() { return cVarInitsVarInitParserRuleCall_2_0; }
		
		//(abbrs+=Abbr)*
		public Assignment getAbbrsAssignment_3() { return cAbbrsAssignment_3; }
		
		//Abbr
		public RuleCall getAbbrsAbbrParserRuleCall_3_0() { return cAbbrsAbbrParserRuleCall_3_0; }
		
		//(macroses+=Macros)*
		public Assignment getMacrosesAssignment_4() { return cMacrosesAssignment_4; }
		
		//Macros
		public RuleCall getMacrosesMacrosParserRuleCall_4_0() { return cMacrosesMacrosParserRuleCall_4_0; }
		
		//(reqs+=Requirement)*
		public Assignment getReqsAssignment_5() { return cReqsAssignment_5; }
		
		//Requirement
		public RuleCall getReqsRequirementParserRuleCall_5_0() { return cReqsRequirementParserRuleCall_5_0; }
		
		//globInterval=GlobInterval?
		public Assignment getGlobIntervalAssignment_6() { return cGlobIntervalAssignment_6; }
		
		//GlobInterval
		public RuleCall getGlobIntervalGlobIntervalParserRuleCall_6_0() { return cGlobIntervalGlobIntervalParserRuleCall_6_0; }
	}
	public class VariableTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.VariableType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBOOLKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cINTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//VariableType returns ecore::EString:
		//    'BOOL' | 'INT';
		@Override public ParserRule getRule() { return rule; }
		
		//'BOOL' | 'INT'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'BOOL'
		public Keyword getBOOLKeyword_0() { return cBOOLKeyword_0; }
		
		//'INT'
		public Keyword getINTKeyword_1() { return cINTKeyword_1; }
	}
	public class DeclVarInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.DeclVarInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclVarInputAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVAR_INPUTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cINPUT_PORTS_COUNTERKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cDECL_SYMBTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cInputCounterAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cInputCounterINTEGERTerminalRuleCall_2_2_0 = (RuleCall)cInputCounterAssignment_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cVarDeclsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cVarDeclsVarDeclarationParserRuleCall_3_0_0 = (RuleCall)cVarDeclsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cEND_VARKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DeclVarInput:
		//    {DeclVarInput}
		//    'VAR_INPUT'
		//    ('INPUT_PORTS_COUNTER' DECL_SYMB inputCounter=INTEGER ';')?
		//    (varDecls+=VarDeclaration ';')*
		//     'END_VAR';
		@Override public ParserRule getRule() { return rule; }
		
		//{DeclVarInput}
		//'VAR_INPUT'
		//('INPUT_PORTS_COUNTER' DECL_SYMB inputCounter=INTEGER ';')?
		//(varDecls+=VarDeclaration ';')*
		// 'END_VAR'
		public Group getGroup() { return cGroup; }
		
		//{DeclVarInput}
		public Action getDeclVarInputAction_0() { return cDeclVarInputAction_0; }
		
		//'VAR_INPUT'
		public Keyword getVAR_INPUTKeyword_1() { return cVAR_INPUTKeyword_1; }
		
		//('INPUT_PORTS_COUNTER' DECL_SYMB inputCounter=INTEGER ';')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'INPUT_PORTS_COUNTER'
		public Keyword getINPUT_PORTS_COUNTERKeyword_2_0() { return cINPUT_PORTS_COUNTERKeyword_2_0; }
		
		//DECL_SYMB
		public RuleCall getDECL_SYMBTerminalRuleCall_2_1() { return cDECL_SYMBTerminalRuleCall_2_1; }
		
		//inputCounter=INTEGER
		public Assignment getInputCounterAssignment_2_2() { return cInputCounterAssignment_2_2; }
		
		//INTEGER
		public RuleCall getInputCounterINTEGERTerminalRuleCall_2_2_0() { return cInputCounterINTEGERTerminalRuleCall_2_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_3() { return cSemicolonKeyword_2_3; }
		
		//(varDecls+=VarDeclaration ';')*
		public Group getGroup_3() { return cGroup_3; }
		
		//varDecls+=VarDeclaration
		public Assignment getVarDeclsAssignment_3_0() { return cVarDeclsAssignment_3_0; }
		
		//VarDeclaration
		public RuleCall getVarDeclsVarDeclarationParserRuleCall_3_0_0() { return cVarDeclsVarDeclarationParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//'END_VAR'
		public Keyword getEND_VARKeyword_4() { return cEND_VARKeyword_4; }
	}
	public class DeclVarOutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.DeclVarOutput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclVarOutputAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVAR_OUTPUTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOUTPUT_PORTS_COUNTERKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cDECL_SYMBTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cOutputCounterAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cOutputCounterINTEGERTerminalRuleCall_2_2_0 = (RuleCall)cOutputCounterAssignment_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cVarDeclsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cVarDeclsVarDeclarationParserRuleCall_3_0_0 = (RuleCall)cVarDeclsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cEND_VARKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DeclVarOutput:
		//    {DeclVarOutput}
		//    'VAR_OUTPUT'
		//    ('OUTPUT_PORTS_COUNTER' DECL_SYMB outputCounter=INTEGER ';')?
		//    (varDecls+=VarDeclaration ';')*
		//    'END_VAR';
		@Override public ParserRule getRule() { return rule; }
		
		//{DeclVarOutput}
		//'VAR_OUTPUT'
		//('OUTPUT_PORTS_COUNTER' DECL_SYMB outputCounter=INTEGER ';')?
		//(varDecls+=VarDeclaration ';')*
		//'END_VAR'
		public Group getGroup() { return cGroup; }
		
		//{DeclVarOutput}
		public Action getDeclVarOutputAction_0() { return cDeclVarOutputAction_0; }
		
		//'VAR_OUTPUT'
		public Keyword getVAR_OUTPUTKeyword_1() { return cVAR_OUTPUTKeyword_1; }
		
		//('OUTPUT_PORTS_COUNTER' DECL_SYMB outputCounter=INTEGER ';')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'OUTPUT_PORTS_COUNTER'
		public Keyword getOUTPUT_PORTS_COUNTERKeyword_2_0() { return cOUTPUT_PORTS_COUNTERKeyword_2_0; }
		
		//DECL_SYMB
		public RuleCall getDECL_SYMBTerminalRuleCall_2_1() { return cDECL_SYMBTerminalRuleCall_2_1; }
		
		//outputCounter=INTEGER
		public Assignment getOutputCounterAssignment_2_2() { return cOutputCounterAssignment_2_2; }
		
		//INTEGER
		public RuleCall getOutputCounterINTEGERTerminalRuleCall_2_2_0() { return cOutputCounterINTEGERTerminalRuleCall_2_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_3() { return cSemicolonKeyword_2_3; }
		
		//(varDecls+=VarDeclaration ';')*
		public Group getGroup_3() { return cGroup_3; }
		
		//varDecls+=VarDeclaration
		public Assignment getVarDeclsAssignment_3_0() { return cVarDeclsAssignment_3_0; }
		
		//VarDeclaration
		public RuleCall getVarDeclsVarDeclarationParserRuleCall_3_0_0() { return cVarDeclsVarDeclarationParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//'END_VAR'
		public Keyword getEND_VARKeyword_4() { return cEND_VARKeyword_4; }
	}
	public class VarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.VarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVVariableParserRuleCall_0_0 = (RuleCall)cVAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cATKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLocationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLocationDIRECT_VARIABLETerminalRuleCall_1_1_0 = (RuleCall)cLocationAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeVariableTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//VarDeclaration:
		//    v=Variable ('AT' location=DIRECT_VARIABLE)? ':' type=VariableType;
		@Override public ParserRule getRule() { return rule; }
		
		//v=Variable ('AT' location=DIRECT_VARIABLE)? ':' type=VariableType
		public Group getGroup() { return cGroup; }
		
		//v=Variable
		public Assignment getVAssignment_0() { return cVAssignment_0; }
		
		//Variable
		public RuleCall getVVariableParserRuleCall_0_0() { return cVVariableParserRuleCall_0_0; }
		
		//('AT' location=DIRECT_VARIABLE)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'AT'
		public Keyword getATKeyword_1_0() { return cATKeyword_1_0; }
		
		//location=DIRECT_VARIABLE
		public Assignment getLocationAssignment_1_1() { return cLocationAssignment_1_1; }
		
		//DIRECT_VARIABLE
		public RuleCall getLocationDIRECT_VARIABLETerminalRuleCall_1_1_0() { return cLocationDIRECT_VARIABLETerminalRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=VariableType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//VariableType
		public RuleCall getTypeVariableTypeParserRuleCall_3_0() { return cTypeVariableTypeParserRuleCall_3_0; }
	}
	public class VarInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.VarInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarInitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVAR_INITKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVarAssignAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVarAssignVarAssignParserRuleCall_2_0_0 = (RuleCall)cVarAssignAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cEND_VARKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VarInit:
		//    {VarInit}
		//    'VAR_INIT'
		//    (varAssign+=VarAssign ';')+
		//    'END_VAR';
		@Override public ParserRule getRule() { return rule; }
		
		//{VarInit}
		//'VAR_INIT'
		//(varAssign+=VarAssign ';')+
		//'END_VAR'
		public Group getGroup() { return cGroup; }
		
		//{VarInit}
		public Action getVarInitAction_0() { return cVarInitAction_0; }
		
		//'VAR_INIT'
		public Keyword getVAR_INITKeyword_1() { return cVAR_INITKeyword_1; }
		
		//(varAssign+=VarAssign ';')+
		public Group getGroup_2() { return cGroup_2; }
		
		//varAssign+=VarAssign
		public Assignment getVarAssignAssignment_2_0() { return cVarAssignAssignment_2_0; }
		
		//VarAssign
		public RuleCall getVarAssignVarAssignParserRuleCall_2_0_0() { return cVarAssignVarAssignParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//'END_VAR'
		public Keyword getEND_VARKeyword_3() { return cEND_VARKeyword_3; }
	}
	public class VarAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.VarAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableVariableCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cVariableVariableCrossReference_0_0.eContents().get(1);
		private final RuleCall cDECL_SYMBTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueINTEGERTerminalRuleCall_2_0_0 = (RuleCall)cValueAlternatives_2_0.eContents().get(0);
		private final RuleCall cValueBOOLEAN_LITERALTerminalRuleCall_2_0_1 = (RuleCall)cValueAlternatives_2_0.eContents().get(1);
		
		//VarAssign:
		//    variable=[Variable] DECL_SYMB value=(INTEGER | BOOLEAN_LITERAL);
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[Variable] DECL_SYMB value=(INTEGER | BOOLEAN_LITERAL)
		public Group getGroup() { return cGroup; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_0_0() { return cVariableVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_0_0_1() { return cVariableVariableIDTerminalRuleCall_0_0_1; }
		
		//DECL_SYMB
		public RuleCall getDECL_SYMBTerminalRuleCall_1() { return cDECL_SYMBTerminalRuleCall_1; }
		
		//value=(INTEGER | BOOLEAN_LITERAL)
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//(INTEGER | BOOLEAN_LITERAL)
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//INTEGER
		public RuleCall getValueINTEGERTerminalRuleCall_2_0_0() { return cValueINTEGERTerminalRuleCall_2_0_0; }
		
		//BOOLEAN_LITERAL
		public RuleCall getValueBOOLEAN_LITERALTerminalRuleCall_2_0_1() { return cValueBOOLEAN_LITERALTerminalRuleCall_2_0_1; }
	}
	public class AbbrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.Abbr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cABBRKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cEND_ABBRKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Abbr:
		//    'ABBR' name=ID
		//        expr=Expression
		//    'END_ABBR';
		@Override public ParserRule getRule() { return rule; }
		
		//'ABBR' name=ID
		//    expr=Expression
		//'END_ABBR'
		public Group getGroup() { return cGroup; }
		
		//'ABBR'
		public Keyword getABBRKeyword_0() { return cABBRKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
		
		//'END_ABBR'
		public Keyword getEND_ABBRKeyword_3() { return cEND_ABBRKeyword_3; }
	}
	public class MacrosElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.Macros");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMACROSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgsVarListParserRuleCall_3_0 = (RuleCall)cArgsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExprExpressionParserRuleCall_5_0 = (RuleCall)cExprAssignment_5.eContents().get(0);
		private final Keyword cEND_MACROSKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Macros:
		//    'MACROS' name=ID '(' (args=VarList)? ')'
		//        expr=Expression
		//    'END_MACROS';
		@Override public ParserRule getRule() { return rule; }
		
		//'MACROS' name=ID '(' (args=VarList)? ')'
		//    expr=Expression
		//'END_MACROS'
		public Group getGroup() { return cGroup; }
		
		//'MACROS'
		public Keyword getMACROSKeyword_0() { return cMACROSKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(args=VarList)?
		public Assignment getArgsAssignment_3() { return cArgsAssignment_3; }
		
		//VarList
		public RuleCall getArgsVarListParserRuleCall_3_0() { return cArgsVarListParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//expr=Expression
		public Assignment getExprAssignment_5() { return cExprAssignment_5; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_5_0() { return cExprExpressionParserRuleCall_5_0; }
		
		//'END_MACROS'
		public Keyword getEND_MACROSKeyword_6() { return cEND_MACROSKeyword_6; }
	}
	public class VarListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.VarList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarsVariableParserRuleCall_0_0 = (RuleCall)cVarsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarsVariableParserRuleCall_1_1_0 = (RuleCall)cVarsAssignment_1_1.eContents().get(0);
		
		//VarList:
		//    vars+=Variable (',' vars+=Variable)*;
		@Override public ParserRule getRule() { return rule; }
		
		//vars+=Variable (',' vars+=Variable)*
		public Group getGroup() { return cGroup; }
		
		//vars+=Variable
		public Assignment getVarsAssignment_0() { return cVarsAssignment_0; }
		
		//Variable
		public RuleCall getVarsVariableParserRuleCall_0_0() { return cVarsVariableParserRuleCall_0_0; }
		
		//(',' vars+=Variable)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//vars+=Variable
		public Assignment getVarsAssignment_1_1() { return cVarsAssignment_1_1; }
		
		//Variable
		public RuleCall getVarsVariableParserRuleCall_1_1_0() { return cVarsVariableParserRuleCall_1_1_0; }
	}
	public class GlobIntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.GlobInterval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINTERVALKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDECL_SYMBTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cGlobIntervalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGlobIntervalTimeLiteralParserRuleCall_2_0 = (RuleCall)cGlobIntervalAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//GlobInterval:
		//    'INTERVAL' DECL_SYMB globInterval=TimeLiteral ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'INTERVAL' DECL_SYMB globInterval=TimeLiteral ';'
		public Group getGroup() { return cGroup; }
		
		//'INTERVAL'
		public Keyword getINTERVALKeyword_0() { return cINTERVALKeyword_0; }
		
		//DECL_SYMB
		public RuleCall getDECL_SYMBTerminalRuleCall_1() { return cDECL_SYMBTerminalRuleCall_1; }
		
		//globInterval=TimeLiteral
		public Assignment getGlobIntervalAssignment_2() { return cGlobIntervalAssignment_2; }
		
		//TimeLiteral
		public RuleCall getGlobIntervalTimeLiteralParserRuleCall_2_0() { return cGlobIntervalTimeLiteralParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class RequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.Requirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cREQKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cTRIGGERKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final RuleCall cDECL_SYMBTerminalRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final Assignment cTrigExprAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cTrigExprExpressionParserRuleCall_2_0_2_0 = (RuleCall)cTrigExprAssignment_2_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Group cGroup_2_0_4 = (Group)cGroup_2_0.eContents().get(4);
		private final Keyword cNLKeyword_2_0_4_0 = (Keyword)cGroup_2_0_4.eContents().get(0);
		private final Assignment cNlTrigAssignment_2_0_4_1 = (Assignment)cGroup_2_0_4.eContents().get(1);
		private final RuleCall cNlTrigSTRINGTerminalRuleCall_2_0_4_1_0 = (RuleCall)cNlTrigAssignment_2_0_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_4_2 = (Keyword)cGroup_2_0_4.eContents().get(2);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cINVARIANTKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final RuleCall cDECL_SYMBTerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final Assignment cInvExprAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cInvExprExpressionParserRuleCall_2_1_2_0 = (RuleCall)cInvExprAssignment_2_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		private final Group cGroup_2_1_4 = (Group)cGroup_2_1.eContents().get(4);
		private final Keyword cNLKeyword_2_1_4_0 = (Keyword)cGroup_2_1_4.eContents().get(0);
		private final Assignment cNlInvAssignment_2_1_4_1 = (Assignment)cGroup_2_1_4.eContents().get(1);
		private final RuleCall cNlInvSTRINGTerminalRuleCall_2_1_4_1_0 = (RuleCall)cNlInvAssignment_2_1_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_4_2 = (Keyword)cGroup_2_1_4.eContents().get(2);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cFINALKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final RuleCall cDECL_SYMBTerminalRuleCall_2_2_1 = (RuleCall)cGroup_2_2.eContents().get(1);
		private final Assignment cFinalExprAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final RuleCall cFinalExprExpressionParserRuleCall_2_2_2_0 = (RuleCall)cFinalExprAssignment_2_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_2_3 = (Keyword)cGroup_2_2.eContents().get(3);
		private final Group cGroup_2_2_4 = (Group)cGroup_2_2.eContents().get(4);
		private final Keyword cNLKeyword_2_2_4_0 = (Keyword)cGroup_2_2_4.eContents().get(0);
		private final Assignment cNlFinalAssignment_2_2_4_1 = (Assignment)cGroup_2_2_4.eContents().get(1);
		private final RuleCall cNlFinalSTRINGTerminalRuleCall_2_2_4_1_0 = (RuleCall)cNlFinalAssignment_2_2_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_2_4_2 = (Keyword)cGroup_2_2_4.eContents().get(2);
		private final Group cGroup_2_3 = (Group)cUnorderedGroup_2.eContents().get(3);
		private final Keyword cDELAYKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final RuleCall cDECL_SYMBTerminalRuleCall_2_3_1 = (RuleCall)cGroup_2_3.eContents().get(1);
		private final Assignment cDelayExprAssignment_2_3_2 = (Assignment)cGroup_2_3.eContents().get(2);
		private final RuleCall cDelayExprExpressionParserRuleCall_2_3_2_0 = (RuleCall)cDelayExprAssignment_2_3_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_3_3 = (Keyword)cGroup_2_3.eContents().get(3);
		private final Group cGroup_2_3_4 = (Group)cGroup_2_3.eContents().get(4);
		private final Keyword cNLKeyword_2_3_4_0 = (Keyword)cGroup_2_3_4.eContents().get(0);
		private final Assignment cNlDelayAssignment_2_3_4_1 = (Assignment)cGroup_2_3_4.eContents().get(1);
		private final RuleCall cNlDelaySTRINGTerminalRuleCall_2_3_4_1_0 = (RuleCall)cNlDelayAssignment_2_3_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_3_4_2 = (Keyword)cGroup_2_3_4.eContents().get(2);
		private final Group cGroup_2_4 = (Group)cUnorderedGroup_2.eContents().get(4);
		private final Keyword cREACTIONKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final RuleCall cDECL_SYMBTerminalRuleCall_2_4_1 = (RuleCall)cGroup_2_4.eContents().get(1);
		private final Assignment cReacExprAssignment_2_4_2 = (Assignment)cGroup_2_4.eContents().get(2);
		private final RuleCall cReacExprExpressionParserRuleCall_2_4_2_0 = (RuleCall)cReacExprAssignment_2_4_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_4_3 = (Keyword)cGroup_2_4.eContents().get(3);
		private final Group cGroup_2_4_4 = (Group)cGroup_2_4.eContents().get(4);
		private final Keyword cNLKeyword_2_4_4_0 = (Keyword)cGroup_2_4_4.eContents().get(0);
		private final Assignment cNlReacAssignment_2_4_4_1 = (Assignment)cGroup_2_4_4.eContents().get(1);
		private final RuleCall cNlReacSTRINGTerminalRuleCall_2_4_4_1_0 = (RuleCall)cNlReacAssignment_2_4_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_4_4_2 = (Keyword)cGroup_2_4_4.eContents().get(2);
		private final Group cGroup_2_5 = (Group)cUnorderedGroup_2.eContents().get(5);
		private final Keyword cRELEASEKeyword_2_5_0 = (Keyword)cGroup_2_5.eContents().get(0);
		private final RuleCall cDECL_SYMBTerminalRuleCall_2_5_1 = (RuleCall)cGroup_2_5.eContents().get(1);
		private final Assignment cRelExprAssignment_2_5_2 = (Assignment)cGroup_2_5.eContents().get(2);
		private final RuleCall cRelExprExpressionParserRuleCall_2_5_2_0 = (RuleCall)cRelExprAssignment_2_5_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_5_3 = (Keyword)cGroup_2_5.eContents().get(3);
		private final Group cGroup_2_5_4 = (Group)cGroup_2_5.eContents().get(4);
		private final Keyword cNLKeyword_2_5_4_0 = (Keyword)cGroup_2_5_4.eContents().get(0);
		private final Assignment cNlRelAssignment_2_5_4_1 = (Assignment)cGroup_2_5_4.eContents().get(1);
		private final RuleCall cNlRelSTRINGTerminalRuleCall_2_5_4_1_0 = (RuleCall)cNlRelAssignment_2_5_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_5_4_2 = (Keyword)cGroup_2_5_4.eContents().get(2);
		private final Keyword cEND_REQKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Requirement:
		//    'REQ' name=ID
		//        ((
		//            'TRIGGER'  DECL_SYMB  trigExpr=Expression ';'
		//            ('NL:' nlTrig=STRING ';')?
		//        )?
		//        &
		//        (
		//            'INVARIANT'  DECL_SYMB  invExpr=Expression ';'
		//            ('NL:' nlInv=STRING ';')?
		//        )?
		//        &
		//        (
		//            'FINAL'  DECL_SYMB  finalExpr=Expression ';'
		//            ('NL:' nlFinal=STRING ';')?
		//        )?
		//        &
		//        (
		//            'DELAY'  DECL_SYMB  delayExpr=Expression ';'
		//            ('NL:' nlDelay=STRING ';')?
		//        )?
		//        &
		//        (
		//            'REACTION'  DECL_SYMB  reacExpr=Expression ';'
		//            ('NL:' nlReac=STRING ';')?
		//        )?
		//        &
		//        (
		//            'RELEASE'  DECL_SYMB  relExpr=Expression ';'
		//            ('NL:' nlRel=STRING ';')?
		//        )?)
		//    'END_REQ';
		@Override public ParserRule getRule() { return rule; }
		
		//'REQ' name=ID
		//    ((
		//        'TRIGGER'  DECL_SYMB  trigExpr=Expression ';'
		//        ('NL:' nlTrig=STRING ';')?
		//    )?
		//    &
		//    (
		//        'INVARIANT'  DECL_SYMB  invExpr=Expression ';'
		//        ('NL:' nlInv=STRING ';')?
		//    )?
		//    &
		//    (
		//        'FINAL'  DECL_SYMB  finalExpr=Expression ';'
		//        ('NL:' nlFinal=STRING ';')?
		//    )?
		//    &
		//    (
		//        'DELAY'  DECL_SYMB  delayExpr=Expression ';'
		//        ('NL:' nlDelay=STRING ';')?
		//    )?
		//    &
		//    (
		//        'REACTION'  DECL_SYMB  reacExpr=Expression ';'
		//        ('NL:' nlReac=STRING ';')?
		//    )?
		//    &
		//    (
		//        'RELEASE'  DECL_SYMB  relExpr=Expression ';'
		//        ('NL:' nlRel=STRING ';')?
		//    )?)
		//'END_REQ'
		public Group getGroup() { return cGroup; }
		
		//'REQ'
		public Keyword getREQKeyword_0() { return cREQKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//((
		//    'TRIGGER'  DECL_SYMB  trigExpr=Expression ';'
		//    ('NL:' nlTrig=STRING ';')?
		//)?
		//&
		//(
		//    'INVARIANT'  DECL_SYMB  invExpr=Expression ';'
		//    ('NL:' nlInv=STRING ';')?
		//)?
		//&
		//(
		//    'FINAL'  DECL_SYMB  finalExpr=Expression ';'
		//    ('NL:' nlFinal=STRING ';')?
		//)?
		//&
		//(
		//    'DELAY'  DECL_SYMB  delayExpr=Expression ';'
		//    ('NL:' nlDelay=STRING ';')?
		//)?
		//&
		//(
		//    'REACTION'  DECL_SYMB  reacExpr=Expression ';'
		//    ('NL:' nlReac=STRING ';')?
		//)?
		//&
		//(
		//    'RELEASE'  DECL_SYMB  relExpr=Expression ';'
		//    ('NL:' nlRel=STRING ';')?
		//)?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//(
		//            'TRIGGER'  DECL_SYMB  trigExpr=Expression ';'
		//            ('NL:' nlTrig=STRING ';')?
		//        )?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'TRIGGER'
		public Keyword getTRIGGERKeyword_2_0_0() { return cTRIGGERKeyword_2_0_0; }
		
		//DECL_SYMB
		public RuleCall getDECL_SYMBTerminalRuleCall_2_0_1() { return cDECL_SYMBTerminalRuleCall_2_0_1; }
		
		//trigExpr=Expression
		public Assignment getTrigExprAssignment_2_0_2() { return cTrigExprAssignment_2_0_2; }
		
		//Expression
		public RuleCall getTrigExprExpressionParserRuleCall_2_0_2_0() { return cTrigExprExpressionParserRuleCall_2_0_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0_3() { return cSemicolonKeyword_2_0_3; }
		
		//('NL:' nlTrig=STRING ';')?
		public Group getGroup_2_0_4() { return cGroup_2_0_4; }
		
		//'NL:'
		public Keyword getNLKeyword_2_0_4_0() { return cNLKeyword_2_0_4_0; }
		
		//nlTrig=STRING
		public Assignment getNlTrigAssignment_2_0_4_1() { return cNlTrigAssignment_2_0_4_1; }
		
		//STRING
		public RuleCall getNlTrigSTRINGTerminalRuleCall_2_0_4_1_0() { return cNlTrigSTRINGTerminalRuleCall_2_0_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0_4_2() { return cSemicolonKeyword_2_0_4_2; }
		
		//(
		//    'INVARIANT'  DECL_SYMB  invExpr=Expression ';'
		//    ('NL:' nlInv=STRING ';')?
		//)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'INVARIANT'
		public Keyword getINVARIANTKeyword_2_1_0() { return cINVARIANTKeyword_2_1_0; }
		
		//DECL_SYMB
		public RuleCall getDECL_SYMBTerminalRuleCall_2_1_1() { return cDECL_SYMBTerminalRuleCall_2_1_1; }
		
		//invExpr=Expression
		public Assignment getInvExprAssignment_2_1_2() { return cInvExprAssignment_2_1_2; }
		
		//Expression
		public RuleCall getInvExprExpressionParserRuleCall_2_1_2_0() { return cInvExprExpressionParserRuleCall_2_1_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1_3() { return cSemicolonKeyword_2_1_3; }
		
		//('NL:' nlInv=STRING ';')?
		public Group getGroup_2_1_4() { return cGroup_2_1_4; }
		
		//'NL:'
		public Keyword getNLKeyword_2_1_4_0() { return cNLKeyword_2_1_4_0; }
		
		//nlInv=STRING
		public Assignment getNlInvAssignment_2_1_4_1() { return cNlInvAssignment_2_1_4_1; }
		
		//STRING
		public RuleCall getNlInvSTRINGTerminalRuleCall_2_1_4_1_0() { return cNlInvSTRINGTerminalRuleCall_2_1_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1_4_2() { return cSemicolonKeyword_2_1_4_2; }
		
		//(
		//    'FINAL'  DECL_SYMB  finalExpr=Expression ';'
		//    ('NL:' nlFinal=STRING ';')?
		//)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'FINAL'
		public Keyword getFINALKeyword_2_2_0() { return cFINALKeyword_2_2_0; }
		
		//DECL_SYMB
		public RuleCall getDECL_SYMBTerminalRuleCall_2_2_1() { return cDECL_SYMBTerminalRuleCall_2_2_1; }
		
		//finalExpr=Expression
		public Assignment getFinalExprAssignment_2_2_2() { return cFinalExprAssignment_2_2_2; }
		
		//Expression
		public RuleCall getFinalExprExpressionParserRuleCall_2_2_2_0() { return cFinalExprExpressionParserRuleCall_2_2_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_2_3() { return cSemicolonKeyword_2_2_3; }
		
		//('NL:' nlFinal=STRING ';')?
		public Group getGroup_2_2_4() { return cGroup_2_2_4; }
		
		//'NL:'
		public Keyword getNLKeyword_2_2_4_0() { return cNLKeyword_2_2_4_0; }
		
		//nlFinal=STRING
		public Assignment getNlFinalAssignment_2_2_4_1() { return cNlFinalAssignment_2_2_4_1; }
		
		//STRING
		public RuleCall getNlFinalSTRINGTerminalRuleCall_2_2_4_1_0() { return cNlFinalSTRINGTerminalRuleCall_2_2_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_2_4_2() { return cSemicolonKeyword_2_2_4_2; }
		
		//(
		//    'DELAY'  DECL_SYMB  delayExpr=Expression ';'
		//    ('NL:' nlDelay=STRING ';')?
		//)?
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//'DELAY'
		public Keyword getDELAYKeyword_2_3_0() { return cDELAYKeyword_2_3_0; }
		
		//DECL_SYMB
		public RuleCall getDECL_SYMBTerminalRuleCall_2_3_1() { return cDECL_SYMBTerminalRuleCall_2_3_1; }
		
		//delayExpr=Expression
		public Assignment getDelayExprAssignment_2_3_2() { return cDelayExprAssignment_2_3_2; }
		
		//Expression
		public RuleCall getDelayExprExpressionParserRuleCall_2_3_2_0() { return cDelayExprExpressionParserRuleCall_2_3_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_3_3() { return cSemicolonKeyword_2_3_3; }
		
		//('NL:' nlDelay=STRING ';')?
		public Group getGroup_2_3_4() { return cGroup_2_3_4; }
		
		//'NL:'
		public Keyword getNLKeyword_2_3_4_0() { return cNLKeyword_2_3_4_0; }
		
		//nlDelay=STRING
		public Assignment getNlDelayAssignment_2_3_4_1() { return cNlDelayAssignment_2_3_4_1; }
		
		//STRING
		public RuleCall getNlDelaySTRINGTerminalRuleCall_2_3_4_1_0() { return cNlDelaySTRINGTerminalRuleCall_2_3_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_3_4_2() { return cSemicolonKeyword_2_3_4_2; }
		
		//(
		//    'REACTION'  DECL_SYMB  reacExpr=Expression ';'
		//    ('NL:' nlReac=STRING ';')?
		//)?
		public Group getGroup_2_4() { return cGroup_2_4; }
		
		//'REACTION'
		public Keyword getREACTIONKeyword_2_4_0() { return cREACTIONKeyword_2_4_0; }
		
		//DECL_SYMB
		public RuleCall getDECL_SYMBTerminalRuleCall_2_4_1() { return cDECL_SYMBTerminalRuleCall_2_4_1; }
		
		//reacExpr=Expression
		public Assignment getReacExprAssignment_2_4_2() { return cReacExprAssignment_2_4_2; }
		
		//Expression
		public RuleCall getReacExprExpressionParserRuleCall_2_4_2_0() { return cReacExprExpressionParserRuleCall_2_4_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_4_3() { return cSemicolonKeyword_2_4_3; }
		
		//('NL:' nlReac=STRING ';')?
		public Group getGroup_2_4_4() { return cGroup_2_4_4; }
		
		//'NL:'
		public Keyword getNLKeyword_2_4_4_0() { return cNLKeyword_2_4_4_0; }
		
		//nlReac=STRING
		public Assignment getNlReacAssignment_2_4_4_1() { return cNlReacAssignment_2_4_4_1; }
		
		//STRING
		public RuleCall getNlReacSTRINGTerminalRuleCall_2_4_4_1_0() { return cNlReacSTRINGTerminalRuleCall_2_4_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_4_4_2() { return cSemicolonKeyword_2_4_4_2; }
		
		//(
		//    'RELEASE'  DECL_SYMB  relExpr=Expression ';'
		//    ('NL:' nlRel=STRING ';')?
		//)?
		public Group getGroup_2_5() { return cGroup_2_5; }
		
		//'RELEASE'
		public Keyword getRELEASEKeyword_2_5_0() { return cRELEASEKeyword_2_5_0; }
		
		//DECL_SYMB
		public RuleCall getDECL_SYMBTerminalRuleCall_2_5_1() { return cDECL_SYMBTerminalRuleCall_2_5_1; }
		
		//relExpr=Expression
		public Assignment getRelExprAssignment_2_5_2() { return cRelExprAssignment_2_5_2; }
		
		//Expression
		public RuleCall getRelExprExpressionParserRuleCall_2_5_2_0() { return cRelExprExpressionParserRuleCall_2_5_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_5_3() { return cSemicolonKeyword_2_5_3; }
		
		//('NL:' nlRel=STRING ';')?
		public Group getGroup_2_5_4() { return cGroup_2_5_4; }
		
		//'NL:'
		public Keyword getNLKeyword_2_5_4_0() { return cNLKeyword_2_5_4_0; }
		
		//nlRel=STRING
		public Assignment getNlRelAssignment_2_5_4_1() { return cNlRelAssignment_2_5_4_1; }
		
		//STRING
		public RuleCall getNlRelSTRINGTerminalRuleCall_2_5_4_1_0() { return cNlRelSTRINGTerminalRuleCall_2_5_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_5_4_2() { return cSemicolonKeyword_2_5_4_2; }
		
		//'END_REQ'
		public Keyword getEND_REQKeyword_3() { return cEND_REQKeyword_3; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variable:
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOrOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOrOpOR_OPERATORTerminalRuleCall_1_1_0 = (RuleCall)cOrOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightXorExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression:
		//    XorExpression ({Expression.left=current} orOp=OR_OPERATOR right=XorExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XorExpression ({Expression.left=current} orOp=OR_OPERATOR right=XorExpression)*
		public Group getGroup() { return cGroup; }
		
		//XorExpression
		public RuleCall getXorExpressionParserRuleCall_0() { return cXorExpressionParserRuleCall_0; }
		
		//({Expression.left=current} orOp=OR_OPERATOR right=XorExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }
		
		//orOp=OR_OPERATOR
		public Assignment getOrOpAssignment_1_1() { return cOrOpAssignment_1_1; }
		
		//OR_OPERATOR
		public RuleCall getOrOpOR_OPERATORTerminalRuleCall_1_1_0() { return cOrOpOR_OPERATORTerminalRuleCall_1_1_0; }
		
		//right=XorExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//XorExpression
		public RuleCall getRightXorExpressionParserRuleCall_1_2_0() { return cRightXorExpressionParserRuleCall_1_2_0; }
	}
	public class XorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.XorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXorExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cXOR_OPERATORParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//XorExpression:
		//    AndExpression ({XorExpression.left=current} XOR_OPERATOR right=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ({XorExpression.left=current} XOR_OPERATOR right=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//({XorExpression.left=current} XOR_OPERATOR right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{XorExpression.left=current}
		public Action getXorExpressionLeftAction_1_0() { return cXorExpressionLeftAction_1_0; }
		
		//XOR_OPERATOR
		public RuleCall getXOR_OPERATORParserRuleCall_1_1() { return cXOR_OPERATORParserRuleCall_1_1; }
		
		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}
	public class XOR_OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.XOR_OPERATOR");
		private final Keyword cXORKeyword = (Keyword)rule.eContents().get(1);
		
		//XOR_OPERATOR:
		//    'XOR';
		@Override public ParserRule getRule() { return rule; }
		
		//'XOR'
		public Keyword getXORKeyword() { return cXORKeyword; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cAndOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAndOpAND_OPERATORParserRuleCall_1_1_0 = (RuleCall)cAndOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightCompExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression:
		//    CompExpression ({AndExpression.left=current} andOp=AND_OPERATOR right=CompExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//CompExpression ({AndExpression.left=current} andOp=AND_OPERATOR right=CompExpression)*
		public Group getGroup() { return cGroup; }
		
		//CompExpression
		public RuleCall getCompExpressionParserRuleCall_0() { return cCompExpressionParserRuleCall_0; }
		
		//({AndExpression.left=current} andOp=AND_OPERATOR right=CompExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndExpression.left=current}
		public Action getAndExpressionLeftAction_1_0() { return cAndExpressionLeftAction_1_0; }
		
		//andOp=AND_OPERATOR
		public Assignment getAndOpAssignment_1_1() { return cAndOpAssignment_1_1; }
		
		//AND_OPERATOR
		public RuleCall getAndOpAND_OPERATORParserRuleCall_1_1_0() { return cAndOpAND_OPERATORParserRuleCall_1_1_0; }
		
		//right=CompExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//CompExpression
		public RuleCall getRightCompExpressionParserRuleCall_1_2_0() { return cRightCompExpressionParserRuleCall_1_2_0; }
	}
	public class AND_OPERATORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.AND_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cANDKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AND_OPERATOR:
		//    '&&' | 'AND';
		@Override public ParserRule getRule() { return rule; }
		
		//'&&' | 'AND'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_0() { return cAmpersandAmpersandKeyword_0; }
		
		//'AND'
		public Keyword getANDKeyword_1() { return cANDKeyword_1; }
	}
	public class CompExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.CompExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEquExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCompExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cCompOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCompOpCompOperatorEnumRuleCall_1_1_0 = (RuleCall)cCompOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//CompExpression:
		//    EquExpression ({CompExpression.left=current} compOp=CompOperator right=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EquExpression ({CompExpression.left=current} compOp=CompOperator right=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//EquExpression
		public RuleCall getEquExpressionParserRuleCall_0() { return cEquExpressionParserRuleCall_0; }
		
		//({CompExpression.left=current} compOp=CompOperator right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{CompExpression.left=current}
		public Action getCompExpressionLeftAction_1_0() { return cCompExpressionLeftAction_1_0; }
		
		//compOp=CompOperator
		public Assignment getCompOpAssignment_1_1() { return cCompOpAssignment_1_1; }
		
		//CompOperator
		public RuleCall getCompOpCompOperatorEnumRuleCall_1_1_0() { return cCompOpCompOperatorEnumRuleCall_1_1_0; }
		
		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}
	public class EquExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.EquExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEquExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cEquOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEquOpEquOperatorEnumRuleCall_1_1_0 = (RuleCall)cEquOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EquExpression:
		//    UnExpression ({EquExpression.left=current} equOp=EquOperator right=UnExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//UnExpression ({EquExpression.left=current} equOp=EquOperator right=UnExpression)*
		public Group getGroup() { return cGroup; }
		
		//UnExpression
		public RuleCall getUnExpressionParserRuleCall_0() { return cUnExpressionParserRuleCall_0; }
		
		//({EquExpression.left=current} equOp=EquOperator right=UnExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{EquExpression.left=current}
		public Action getEquExpressionLeftAction_1_0() { return cEquExpressionLeftAction_1_0; }
		
		//equOp=EquOperator
		public Assignment getEquOpAssignment_1_1() { return cEquOpAssignment_1_1; }
		
		//EquOperator
		public RuleCall getEquOpEquOperatorEnumRuleCall_1_1_0() { return cEquOpEquOperatorEnumRuleCall_1_1_0; }
		
		//right=UnExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//UnExpression
		public RuleCall getRightUnExpressionParserRuleCall_1_2_0() { return cRightUnExpressionParserRuleCall_1_2_0; }
	}
	public class UnOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.UnOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNotOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cFEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cREKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cHIGHKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLOWKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//UnOperator returns ecore::EString:
		//    NotOperator | 'FE' | 'RE' | 'HIGH' | 'LOW' ;
		@Override public ParserRule getRule() { return rule; }
		
		//NotOperator | 'FE' | 'RE' | 'HIGH' | 'LOW'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NotOperator
		public RuleCall getNotOperatorParserRuleCall_0() { return cNotOperatorParserRuleCall_0; }
		
		//'FE'
		public Keyword getFEKeyword_1() { return cFEKeyword_1; }
		
		//'RE'
		public Keyword getREKeyword_2() { return cREKeyword_2; }
		
		//'HIGH'
		public Keyword getHIGHKeyword_3() { return cHIGHKeyword_3; }
		
		//'LOW'
		public Keyword getLOWKeyword_4() { return cLOWKeyword_4; }
	}
	public class NotOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.NotOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNOTKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//NotOperator:
		//    'NOT' | '!';
		@Override public ParserRule getRule() { return rule; }
		
		//'NOT' | '!'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'NOT'
		public Keyword getNOTKeyword_0() { return cNOTKeyword_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }
	}
	public class UnExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.UnExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cUnOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cUnOpUnOperatorParserRuleCall_1_0_0 = (RuleCall)cUnOpAssignment_1_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//UnExpression:
		//    PrimaryExpression | unOp=UnOperator right=PrimaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression | unOp=UnOperator right=PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//unOp=UnOperator right=PrimaryExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//unOp=UnOperator
		public Assignment getUnOpAssignment_1_0() { return cUnOpAssignment_1_0; }
		
		//UnOperator
		public RuleCall getUnOpUnOperatorParserRuleCall_1_0_0() { return cUnOpUnOperatorParserRuleCall_1_0_0; }
		
		//right=PrimaryExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_1_0() { return cRightPrimaryExpressionParserRuleCall_1_1_0; }
	}
	public class TauExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.TauExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTAUKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTimeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeTimeLiteralParserRuleCall_2_0 = (RuleCall)cTimeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TauExpression:
		//    'TAU' '(' (time=TimeLiteral) ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'TAU' '(' (time=TimeLiteral) ')'
		public Group getGroup() { return cGroup; }
		
		//'TAU'
		public Keyword getTAUKeyword_0() { return cTAUKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(time=TimeLiteral)
		public Assignment getTimeAssignment_2() { return cTimeAssignment_2; }
		
		//TimeLiteral
		public RuleCall getTimeTimeLiteralParserRuleCall_2_0() { return cTimeTimeLiteralParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class TimeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.TimeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTIME_PREF_LITERALParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cIntervalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIntervalINTERVALTerminalRuleCall_1_0 = (RuleCall)cIntervalAssignment_1.eContents().get(0);
		
		//TimeLiteral:
		//     TIME_PREF_LITERAL interval=INTERVAL;
		@Override public ParserRule getRule() { return rule; }
		
		//TIME_PREF_LITERAL interval=INTERVAL
		public Group getGroup() { return cGroup; }
		
		//TIME_PREF_LITERAL
		public RuleCall getTIME_PREF_LITERALParserRuleCall_0() { return cTIME_PREF_LITERALParserRuleCall_0; }
		
		//interval=INTERVAL
		public Assignment getIntervalAssignment_1() { return cIntervalAssignment_1; }
		
		//INTERVAL
		public RuleCall getIntervalINTERVALTerminalRuleCall_1_0() { return cIntervalINTERVALTerminalRuleCall_1_0; }
	}
	public class TIME_PREF_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.TIME_PREF_LITERAL");
		private final Keyword cTKeyword = (Keyword)rule.eContents().get(1);
		
		//TIME_PREF_LITERAL returns ecore::EString:
		//    'T#';
		@Override public ParserRule getRule() { return rule; }
		
		//'T#'
		public Keyword getTKeyword() { return cTKeyword; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConstantAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConstantConstantParserRuleCall_0_0 = (RuleCall)cConstantAssignment_0.eContents().get(0);
		private final Assignment cTauAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTauTauExpressionParserRuleCall_1_0 = (RuleCall)cTauAssignment_1.eContents().get(0);
		private final Assignment cVAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final CrossReference cVCrossVarAbbrCrossReference_2_0 = (CrossReference)cVAssignment_2.eContents().get(0);
		private final RuleCall cVCrossVarAbbrIDTerminalRuleCall_2_0_1 = (RuleCall)cVCrossVarAbbrCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cMacrosAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cMacrosMacrosCrossReference_3_0_0 = (CrossReference)cMacrosAssignment_3_0.eContents().get(0);
		private final RuleCall cMacrosMacrosIDTerminalRuleCall_3_0_0_1 = (RuleCall)cMacrosMacrosCrossReference_3_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cArgsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cArgsParamAssignmentElementsParserRuleCall_3_2_0 = (RuleCall)cArgsAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNestExprAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNestExprExpressionParserRuleCall_4_1_0 = (RuleCall)cNestExprAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//PrimaryExpression:
		//    constant=Constant | tau=TauExpression | v=[CrossVarAbbr] | macros=[Macros]'(' (args=ParamAssignmentElements)? ')' | '(' nestExpr=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//constant=Constant | tau=TauExpression | v=[CrossVarAbbr] | macros=[Macros]'(' (args=ParamAssignmentElements)? ')' | '(' nestExpr=Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//constant=Constant
		public Assignment getConstantAssignment_0() { return cConstantAssignment_0; }
		
		//Constant
		public RuleCall getConstantConstantParserRuleCall_0_0() { return cConstantConstantParserRuleCall_0_0; }
		
		//tau=TauExpression
		public Assignment getTauAssignment_1() { return cTauAssignment_1; }
		
		//TauExpression
		public RuleCall getTauTauExpressionParserRuleCall_1_0() { return cTauTauExpressionParserRuleCall_1_0; }
		
		//v=[CrossVarAbbr]
		public Assignment getVAssignment_2() { return cVAssignment_2; }
		
		//[CrossVarAbbr]
		public CrossReference getVCrossVarAbbrCrossReference_2_0() { return cVCrossVarAbbrCrossReference_2_0; }
		
		//ID
		public RuleCall getVCrossVarAbbrIDTerminalRuleCall_2_0_1() { return cVCrossVarAbbrIDTerminalRuleCall_2_0_1; }
		
		//macros=[Macros]'(' (args=ParamAssignmentElements)? ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//macros=[Macros]
		public Assignment getMacrosAssignment_3_0() { return cMacrosAssignment_3_0; }
		
		//[Macros]
		public CrossReference getMacrosMacrosCrossReference_3_0_0() { return cMacrosMacrosCrossReference_3_0_0; }
		
		//ID
		public RuleCall getMacrosMacrosIDTerminalRuleCall_3_0_0_1() { return cMacrosMacrosIDTerminalRuleCall_3_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//(args=ParamAssignmentElements)?
		public Assignment getArgsAssignment_3_2() { return cArgsAssignment_3_2; }
		
		//ParamAssignmentElements
		public RuleCall getArgsParamAssignmentElementsParserRuleCall_3_2_0() { return cArgsParamAssignmentElementsParserRuleCall_3_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//'(' nestExpr=Expression ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//nestExpr=Expression
		public Assignment getNestExprAssignment_4_1() { return cNestExprAssignment_4_1; }
		
		//Expression
		public RuleCall getNestExprExpressionParserRuleCall_4_1_0() { return cNestExprExpressionParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTEGERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBOOLEAN_LITERALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Constant:
		//    INTEGER | BOOLEAN_LITERAL;
		@Override public ParserRule getRule() { return rule; }
		
		//INTEGER | BOOLEAN_LITERAL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INTEGER
		public RuleCall getINTEGERTerminalRuleCall_0() { return cINTEGERTerminalRuleCall_0; }
		
		//BOOLEAN_LITERAL
		public RuleCall getBOOLEAN_LITERALTerminalRuleCall_1() { return cBOOLEAN_LITERALTerminalRuleCall_1; }
	}
	public class ParamAssignmentElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.ParamAssignmentElements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cElementsCrossVarAbbrCrossReference_0_0 = (CrossReference)cElementsAssignment_0.eContents().get(0);
		private final RuleCall cElementsCrossVarAbbrIDTerminalRuleCall_0_0_1 = (RuleCall)cElementsCrossVarAbbrCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cElementsCrossVarAbbrCrossReference_1_1_0 = (CrossReference)cElementsAssignment_1_1.eContents().get(0);
		private final RuleCall cElementsCrossVarAbbrIDTerminalRuleCall_1_1_0_1 = (RuleCall)cElementsCrossVarAbbrCrossReference_1_1_0.eContents().get(1);
		
		//ParamAssignmentElements:
		//    elements+=[CrossVarAbbr] (',' elements+=[CrossVarAbbr])*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=[CrossVarAbbr] (',' elements+=[CrossVarAbbr])*
		public Group getGroup() { return cGroup; }
		
		//elements+=[CrossVarAbbr]
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//[CrossVarAbbr]
		public CrossReference getElementsCrossVarAbbrCrossReference_0_0() { return cElementsCrossVarAbbrCrossReference_0_0; }
		
		//ID
		public RuleCall getElementsCrossVarAbbrIDTerminalRuleCall_0_0_1() { return cElementsCrossVarAbbrIDTerminalRuleCall_0_0_1; }
		
		//(',' elements+=[CrossVarAbbr])*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//elements+=[CrossVarAbbr]
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//[CrossVarAbbr]
		public CrossReference getElementsCrossVarAbbrCrossReference_1_1_0() { return cElementsCrossVarAbbrCrossReference_1_1_0; }
		
		//ID
		public RuleCall getElementsCrossVarAbbrIDTerminalRuleCall_1_1_0_1() { return cElementsCrossVarAbbrIDTerminalRuleCall_1_1_0_1; }
	}
	public class CrossVarAbbrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.CrossVarAbbr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbbrParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CrossVarAbbr:
		//    Variable | Abbr;
		@Override public ParserRule getRule() { return rule; }
		
		//Variable | Abbr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }
		
		//Abbr
		public RuleCall getAbbrParserRuleCall_1() { return cAbbrParserRuleCall_1; }
	}
	
	public class EquOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.EquOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EQUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOT_EQUALLessThanSignGreaterThanSignKeyword_1_0 = (Keyword)cNOT_EQUALEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EquOperator:
		//    EQUAL='==' | NOT_EQUAL='<>';
		public EnumRule getRule() { return rule; }
		
		//EQUAL='==' | NOT_EQUAL='<>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQUAL='=='
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }
		
		//'=='
		public Keyword getEQUALEqualsSignEqualsSignKeyword_0_0() { return cEQUALEqualsSignEqualsSignKeyword_0_0; }
		
		//NOT_EQUAL='<>'
		public EnumLiteralDeclaration getNOT_EQUALEnumLiteralDeclaration_1() { return cNOT_EQUALEnumLiteralDeclaration_1; }
		
		//'<>'
		public Keyword getNOT_EQUALLessThanSignGreaterThanSignKeyword_1_0() { return cNOT_EQUALLessThanSignGreaterThanSignKeyword_1_0; }
	}
	public class CompOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.CompOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLESSLessThanSignKeyword_0_0 = (Keyword)cLESSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGREATERGreaterThanSignKeyword_1_0 = (Keyword)cGREATEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_EQUEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLESS_EQULessThanSignEqualsSignKeyword_2_0 = (Keyword)cLESS_EQUEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_EQUEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREATER_EQUGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGREATER_EQUEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum CompOperator:
		//    LESS='<' | GREATER='>' | LESS_EQU='<=' | GREATER_EQU='>=';
		public EnumRule getRule() { return rule; }
		
		//LESS='<' | GREATER='>' | LESS_EQU='<=' | GREATER_EQU='>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LESS='<'
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_0() { return cLESSEnumLiteralDeclaration_0; }
		
		//'<'
		public Keyword getLESSLessThanSignKeyword_0_0() { return cLESSLessThanSignKeyword_0_0; }
		
		//GREATER='>'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_1() { return cGREATEREnumLiteralDeclaration_1; }
		
		//'>'
		public Keyword getGREATERGreaterThanSignKeyword_1_0() { return cGREATERGreaterThanSignKeyword_1_0; }
		
		//LESS_EQU='<='
		public EnumLiteralDeclaration getLESS_EQUEnumLiteralDeclaration_2() { return cLESS_EQUEnumLiteralDeclaration_2; }
		
		//'<='
		public Keyword getLESS_EQULessThanSignEqualsSignKeyword_2_0() { return cLESS_EQULessThanSignEqualsSignKeyword_2_0; }
		
		//GREATER_EQU='>='
		public EnumLiteralDeclaration getGREATER_EQUEnumLiteralDeclaration_3() { return cGREATER_EQUEnumLiteralDeclaration_3; }
		
		//'>='
		public Keyword getGREATER_EQUGreaterThanSignEqualsSignKeyword_3_0() { return cGREATER_EQUGreaterThanSignEqualsSignKeyword_3_0; }
	}
	
	private final ModelElements pModel;
	private final VariableTypeElements pVariableType;
	private final DeclVarInputElements pDeclVarInput;
	private final DeclVarOutputElements pDeclVarOutput;
	private final VarDeclarationElements pVarDeclaration;
	private final VarInitElements pVarInit;
	private final VarAssignElements pVarAssign;
	private final AbbrElements pAbbr;
	private final MacrosElements pMacros;
	private final VarListElements pVarList;
	private final GlobIntervalElements pGlobInterval;
	private final RequirementElements pRequirement;
	private final TerminalRule tDECL_SYMB;
	private final VariableElements pVariable;
	private final ExpressionElements pExpression;
	private final TerminalRule tOR_OPERATOR;
	private final XorExpressionElements pXorExpression;
	private final XOR_OPERATORElements pXOR_OPERATOR;
	private final AndExpressionElements pAndExpression;
	private final AND_OPERATORElements pAND_OPERATOR;
	private final CompExpressionElements pCompExpression;
	private final EquExpressionElements pEquExpression;
	private final EquOperatorElements eEquOperator;
	private final CompOperatorElements eCompOperator;
	private final UnOperatorElements pUnOperator;
	private final NotOperatorElements pNotOperator;
	private final UnExpressionElements pUnExpression;
	private final TauExpressionElements pTauExpression;
	private final TimeLiteralElements pTimeLiteral;
	private final TIME_PREF_LITERALElements pTIME_PREF_LITERAL;
	private final TerminalRule tINTERVAL;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final ConstantElements pConstant;
	private final ParamAssignmentElementsElements pParamAssignmentElements;
	private final CrossVarAbbrElements pCrossVarAbbr;
	private final TerminalRule tDIRECT_VARIABLE;
	private final TerminalRule tDIRECT_TYPE_PREFIX;
	private final TerminalRule tDIRECT_SIZE_PREFIX;
	private final TerminalRule tINTEGER;
	private final TerminalRule tLETTER;
	private final TerminalRule tBIT;
	private final TerminalRule tOCTAL_DIGIT;
	private final TerminalRule tDIGIT;
	private final TerminalRule tHEX_DIGIT;
	private final TerminalRule tBOOLEAN_LITERAL;
	private final TerminalRule tID;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tSTRING;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public EdtlGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pVariableType = new VariableTypeElements();
		this.pDeclVarInput = new DeclVarInputElements();
		this.pDeclVarOutput = new DeclVarOutputElements();
		this.pVarDeclaration = new VarDeclarationElements();
		this.pVarInit = new VarInitElements();
		this.pVarAssign = new VarAssignElements();
		this.pAbbr = new AbbrElements();
		this.pMacros = new MacrosElements();
		this.pVarList = new VarListElements();
		this.pGlobInterval = new GlobIntervalElements();
		this.pRequirement = new RequirementElements();
		this.tDECL_SYMB = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.DECL_SYMB");
		this.pVariable = new VariableElements();
		this.pExpression = new ExpressionElements();
		this.tOR_OPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.OR_OPERATOR");
		this.pXorExpression = new XorExpressionElements();
		this.pXOR_OPERATOR = new XOR_OPERATORElements();
		this.pAndExpression = new AndExpressionElements();
		this.pAND_OPERATOR = new AND_OPERATORElements();
		this.pCompExpression = new CompExpressionElements();
		this.pEquExpression = new EquExpressionElements();
		this.eEquOperator = new EquOperatorElements();
		this.eCompOperator = new CompOperatorElements();
		this.pUnOperator = new UnOperatorElements();
		this.pNotOperator = new NotOperatorElements();
		this.pUnExpression = new UnExpressionElements();
		this.pTauExpression = new TauExpressionElements();
		this.pTimeLiteral = new TimeLiteralElements();
		this.pTIME_PREF_LITERAL = new TIME_PREF_LITERALElements();
		this.tINTERVAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.INTERVAL");
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pConstant = new ConstantElements();
		this.pParamAssignmentElements = new ParamAssignmentElementsElements();
		this.pCrossVarAbbr = new CrossVarAbbrElements();
		this.tDIRECT_VARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.DIRECT_VARIABLE");
		this.tDIRECT_TYPE_PREFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.DIRECT_TYPE_PREFIX");
		this.tDIRECT_SIZE_PREFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.DIRECT_SIZE_PREFIX");
		this.tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.INTEGER");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.LETTER");
		this.tBIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.BIT");
		this.tOCTAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.OCTAL_DIGIT");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.DIGIT");
		this.tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.HEX_DIGIT");
		this.tBOOLEAN_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.BOOLEAN_LITERAL");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.ID");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.WS");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.STRING");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.edtl.Edtl.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("su.nsk.iae.edtl.Edtl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//    (
	//        (declVarInput+=DeclVarInput)* &
	//        (declVarOutput+=DeclVarOutput)* &
	//        (varInits+=VarInit)* &
	//        (abbrs+=Abbr)* &
	//        (macroses+=Macros)* &
	//        (reqs+=Requirement)* &
	//        globInterval=GlobInterval?
	//    );
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//VariableType returns ecore::EString:
	//    'BOOL' | 'INT';
	public VariableTypeElements getVariableTypeAccess() {
		return pVariableType;
	}
	
	public ParserRule getVariableTypeRule() {
		return getVariableTypeAccess().getRule();
	}
	
	//DeclVarInput:
	//    {DeclVarInput}
	//    'VAR_INPUT'
	//    ('INPUT_PORTS_COUNTER' DECL_SYMB inputCounter=INTEGER ';')?
	//    (varDecls+=VarDeclaration ';')*
	//     'END_VAR';
	public DeclVarInputElements getDeclVarInputAccess() {
		return pDeclVarInput;
	}
	
	public ParserRule getDeclVarInputRule() {
		return getDeclVarInputAccess().getRule();
	}
	
	//DeclVarOutput:
	//    {DeclVarOutput}
	//    'VAR_OUTPUT'
	//    ('OUTPUT_PORTS_COUNTER' DECL_SYMB outputCounter=INTEGER ';')?
	//    (varDecls+=VarDeclaration ';')*
	//    'END_VAR';
	public DeclVarOutputElements getDeclVarOutputAccess() {
		return pDeclVarOutput;
	}
	
	public ParserRule getDeclVarOutputRule() {
		return getDeclVarOutputAccess().getRule();
	}
	
	//VarDeclaration:
	//    v=Variable ('AT' location=DIRECT_VARIABLE)? ':' type=VariableType;
	public VarDeclarationElements getVarDeclarationAccess() {
		return pVarDeclaration;
	}
	
	public ParserRule getVarDeclarationRule() {
		return getVarDeclarationAccess().getRule();
	}
	
	//VarInit:
	//    {VarInit}
	//    'VAR_INIT'
	//    (varAssign+=VarAssign ';')+
	//    'END_VAR';
	public VarInitElements getVarInitAccess() {
		return pVarInit;
	}
	
	public ParserRule getVarInitRule() {
		return getVarInitAccess().getRule();
	}
	
	//VarAssign:
	//    variable=[Variable] DECL_SYMB value=(INTEGER | BOOLEAN_LITERAL);
	public VarAssignElements getVarAssignAccess() {
		return pVarAssign;
	}
	
	public ParserRule getVarAssignRule() {
		return getVarAssignAccess().getRule();
	}
	
	//Abbr:
	//    'ABBR' name=ID
	//        expr=Expression
	//    'END_ABBR';
	public AbbrElements getAbbrAccess() {
		return pAbbr;
	}
	
	public ParserRule getAbbrRule() {
		return getAbbrAccess().getRule();
	}
	
	//Macros:
	//    'MACROS' name=ID '(' (args=VarList)? ')'
	//        expr=Expression
	//    'END_MACROS';
	public MacrosElements getMacrosAccess() {
		return pMacros;
	}
	
	public ParserRule getMacrosRule() {
		return getMacrosAccess().getRule();
	}
	
	//VarList:
	//    vars+=Variable (',' vars+=Variable)*;
	public VarListElements getVarListAccess() {
		return pVarList;
	}
	
	public ParserRule getVarListRule() {
		return getVarListAccess().getRule();
	}
	
	//GlobInterval:
	//    'INTERVAL' DECL_SYMB globInterval=TimeLiteral ';';
	public GlobIntervalElements getGlobIntervalAccess() {
		return pGlobInterval;
	}
	
	public ParserRule getGlobIntervalRule() {
		return getGlobIntervalAccess().getRule();
	}
	
	//Requirement:
	//    'REQ' name=ID
	//        ((
	//            'TRIGGER'  DECL_SYMB  trigExpr=Expression ';'
	//            ('NL:' nlTrig=STRING ';')?
	//        )?
	//        &
	//        (
	//            'INVARIANT'  DECL_SYMB  invExpr=Expression ';'
	//            ('NL:' nlInv=STRING ';')?
	//        )?
	//        &
	//        (
	//            'FINAL'  DECL_SYMB  finalExpr=Expression ';'
	//            ('NL:' nlFinal=STRING ';')?
	//        )?
	//        &
	//        (
	//            'DELAY'  DECL_SYMB  delayExpr=Expression ';'
	//            ('NL:' nlDelay=STRING ';')?
	//        )?
	//        &
	//        (
	//            'REACTION'  DECL_SYMB  reacExpr=Expression ';'
	//            ('NL:' nlReac=STRING ';')?
	//        )?
	//        &
	//        (
	//            'RELEASE'  DECL_SYMB  relExpr=Expression ';'
	//            ('NL:' nlRel=STRING ';')?
	//        )?)
	//    'END_REQ';
	public RequirementElements getRequirementAccess() {
		return pRequirement;
	}
	
	public ParserRule getRequirementRule() {
		return getRequirementAccess().getRule();
	}
	
	//terminal DECL_SYMB:
	//    ':=';
	public TerminalRule getDECL_SYMBRule() {
		return tDECL_SYMB;
	}
	
	//Variable:
	//    name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Expression:
	//    XorExpression ({Expression.left=current} orOp=OR_OPERATOR right=XorExpression)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//terminal OR_OPERATOR:
	//    '||' | 'OR';
	public TerminalRule getOR_OPERATORRule() {
		return tOR_OPERATOR;
	}
	
	//XorExpression:
	//    AndExpression ({XorExpression.left=current} XOR_OPERATOR right=AndExpression)*;
	public XorExpressionElements getXorExpressionAccess() {
		return pXorExpression;
	}
	
	public ParserRule getXorExpressionRule() {
		return getXorExpressionAccess().getRule();
	}
	
	//XOR_OPERATOR:
	//    'XOR';
	public XOR_OPERATORElements getXOR_OPERATORAccess() {
		return pXOR_OPERATOR;
	}
	
	public ParserRule getXOR_OPERATORRule() {
		return getXOR_OPERATORAccess().getRule();
	}
	
	//AndExpression:
	//    CompExpression ({AndExpression.left=current} andOp=AND_OPERATOR right=CompExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//AND_OPERATOR:
	//    '&&' | 'AND';
	public AND_OPERATORElements getAND_OPERATORAccess() {
		return pAND_OPERATOR;
	}
	
	public ParserRule getAND_OPERATORRule() {
		return getAND_OPERATORAccess().getRule();
	}
	
	//CompExpression:
	//    EquExpression ({CompExpression.left=current} compOp=CompOperator right=AndExpression)*;
	public CompExpressionElements getCompExpressionAccess() {
		return pCompExpression;
	}
	
	public ParserRule getCompExpressionRule() {
		return getCompExpressionAccess().getRule();
	}
	
	//EquExpression:
	//    UnExpression ({EquExpression.left=current} equOp=EquOperator right=UnExpression)*;
	public EquExpressionElements getEquExpressionAccess() {
		return pEquExpression;
	}
	
	public ParserRule getEquExpressionRule() {
		return getEquExpressionAccess().getRule();
	}
	
	//enum EquOperator:
	//    EQUAL='==' | NOT_EQUAL='<>';
	public EquOperatorElements getEquOperatorAccess() {
		return eEquOperator;
	}
	
	public EnumRule getEquOperatorRule() {
		return getEquOperatorAccess().getRule();
	}
	
	//enum CompOperator:
	//    LESS='<' | GREATER='>' | LESS_EQU='<=' | GREATER_EQU='>=';
	public CompOperatorElements getCompOperatorAccess() {
		return eCompOperator;
	}
	
	public EnumRule getCompOperatorRule() {
		return getCompOperatorAccess().getRule();
	}
	
	//UnOperator returns ecore::EString:
	//    NotOperator | 'FE' | 'RE' | 'HIGH' | 'LOW' ;
	public UnOperatorElements getUnOperatorAccess() {
		return pUnOperator;
	}
	
	public ParserRule getUnOperatorRule() {
		return getUnOperatorAccess().getRule();
	}
	
	//NotOperator:
	//    'NOT' | '!';
	public NotOperatorElements getNotOperatorAccess() {
		return pNotOperator;
	}
	
	public ParserRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}
	
	//UnExpression:
	//    PrimaryExpression | unOp=UnOperator right=PrimaryExpression;
	public UnExpressionElements getUnExpressionAccess() {
		return pUnExpression;
	}
	
	public ParserRule getUnExpressionRule() {
		return getUnExpressionAccess().getRule();
	}
	
	//TauExpression:
	//    'TAU' '(' (time=TimeLiteral) ')';
	public TauExpressionElements getTauExpressionAccess() {
		return pTauExpression;
	}
	
	public ParserRule getTauExpressionRule() {
		return getTauExpressionAccess().getRule();
	}
	
	//TimeLiteral:
	//     TIME_PREF_LITERAL interval=INTERVAL;
	public TimeLiteralElements getTimeLiteralAccess() {
		return pTimeLiteral;
	}
	
	public ParserRule getTimeLiteralRule() {
		return getTimeLiteralAccess().getRule();
	}
	
	//TIME_PREF_LITERAL returns ecore::EString:
	//    'T#';
	public TIME_PREF_LITERALElements getTIME_PREF_LITERALAccess() {
		return pTIME_PREF_LITERAL;
	}
	
	public ParserRule getTIME_PREF_LITERALRule() {
		return getTIME_PREF_LITERALAccess().getRule();
	}
	
	//terminal INTERVAL returns ecore::EString:
	//    (INTEGER 'd')? (INTEGER 'h')? (INTEGER 'm')? (INTEGER 's')? (INTEGER 'ms')?;
	public TerminalRule getINTERVALRule() {
		return tINTERVAL;
	}
	
	//PrimaryExpression:
	//    constant=Constant | tau=TauExpression | v=[CrossVarAbbr] | macros=[Macros]'(' (args=ParamAssignmentElements)? ')' | '(' nestExpr=Expression ')';
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//Constant:
	//    INTEGER | BOOLEAN_LITERAL;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//ParamAssignmentElements:
	//    elements+=[CrossVarAbbr] (',' elements+=[CrossVarAbbr])*;
	public ParamAssignmentElementsElements getParamAssignmentElementsAccess() {
		return pParamAssignmentElements;
	}
	
	public ParserRule getParamAssignmentElementsRule() {
		return getParamAssignmentElementsAccess().getRule();
	}
	
	//CrossVarAbbr:
	//    Variable | Abbr;
	public CrossVarAbbrElements getCrossVarAbbrAccess() {
		return pCrossVarAbbr;
	}
	
	public ParserRule getCrossVarAbbrRule() {
		return getCrossVarAbbrAccess().getRule();
	}
	
	//terminal DIRECT_VARIABLE returns ecore::EString:
	//    '%' DIRECT_TYPE_PREFIX DIRECT_SIZE_PREFIX OCTAL_DIGIT ('.' OCTAL_DIGIT)*;
	public TerminalRule getDIRECT_VARIABLERule() {
		return tDIRECT_VARIABLE;
	}
	
	//terminal fragment DIRECT_TYPE_PREFIX:
	//    'I' | 'Q' | 'M';
	public TerminalRule getDIRECT_TYPE_PREFIXRule() {
		return tDIRECT_TYPE_PREFIX;
	}
	
	//terminal fragment DIRECT_SIZE_PREFIX:
	//    'X' | 'B' | 'W' | 'D' | 'L';
	public TerminalRule getDIRECT_SIZE_PREFIXRule() {
		return tDIRECT_SIZE_PREFIX;
	}
	
	//terminal INTEGER returns ecore::EString:
	//    DIGIT+;
	public TerminalRule getINTEGERRule() {
		return tINTEGER;
	}
	
	//terminal fragment LETTER:
	//    'A'..'Z' | 'a'..'z' | '_';
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal fragment BIT:
	//    '0' | '1';
	public TerminalRule getBITRule() {
		return tBIT;
	}
	
	//terminal fragment OCTAL_DIGIT:
	//    '0'..'7';
	public TerminalRule getOCTAL_DIGITRule() {
		return tOCTAL_DIGIT;
	}
	
	//terminal fragment DIGIT:
	//    '0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal fragment HEX_DIGIT:
	//    DIGIT | 'A'..'F';
	public TerminalRule getHEX_DIGITRule() {
		return tHEX_DIGIT;
	}
	
	//terminal BOOLEAN_LITERAL:
	//    'TRUE' | 'FALSE';
	public TerminalRule getBOOLEAN_LITERALRule() {
		return tBOOLEAN_LITERAL;
	}
	
	//terminal ID returns ecore::EString:
	//    LETTER (LETTER | DIGIT)*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal ML_COMMENT:
	//    '/*' -> '*/' | '(*' -> '*)';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//    '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//    (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal STRING:
	//     '"' ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
	//    "'" ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ANY_OTHER:
	//    .;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
