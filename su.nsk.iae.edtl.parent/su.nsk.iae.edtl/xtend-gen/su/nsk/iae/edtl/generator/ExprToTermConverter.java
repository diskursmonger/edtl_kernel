/**
 * generated by Xtext 2.34.0
 */
package su.nsk.iae.edtl.generator;

import su.nsk.iae.edtl.edtl.AndExpression;
import su.nsk.iae.edtl.edtl.CrossVarAbbr;
import su.nsk.iae.edtl.edtl.Expression;
import su.nsk.iae.edtl.edtl.PrimaryExpression;
import su.nsk.iae.edtl.edtl.TauExpression;
import su.nsk.iae.edtl.edtl.UnExpression;
import su.nsk.iae.edtl.edtl.XorExpression;

/**
 * ======================= CONVERTERS =======================
 */
@SuppressWarnings("all")
public class ExprToTermConverter {
  private Expression expr;

  private Attribute attribute;

  public ExprToTermConverter(final Expression expr, final Attribute attribute) {
    this.expr = expr;
    this.attribute = attribute;
  }

  public static Term convertOrDefault(final Expression expr, final Attribute attribute, final Term defaultTerm) {
    Term _xifexpression = null;
    if ((expr != null)) {
      _xifexpression = new ExprToTermConverter(expr, attribute).convert();
    } else {
      _xifexpression = defaultTerm;
    }
    return _xifexpression;
  }

  public Term convert() {
    return this.convertExprToTerm(this.expr);
  }

  private Term convertExprToTerm(final Expression expr) {
    if ((expr == null)) {
      throw new NullPointerException("Expression is null");
    }
    if ((expr instanceof PrimaryExpression)) {
      return this.convertPrimaryExprToPrimaryTerm(((PrimaryExpression)expr));
    }
    if ((expr instanceof UnExpression)) {
      return this.convertUnaryExprToUnaryTerm(((UnExpression)expr));
    }
    if ((expr instanceof AndExpression)) {
      Term _convertExprToTerm = this.convertExprToTerm(((AndExpression)expr).getLeft());
      Term _convertExprToTerm_1 = this.convertExprToTerm(((AndExpression)expr).getRight());
      return new AndTerm(_convertExprToTerm, _convertExprToTerm_1);
    }
    String _orOp = expr.getOrOp();
    boolean _tripleNotEquals = (_orOp != null);
    if (_tripleNotEquals) {
      Term _convertExprToTerm_2 = this.convertExprToTerm(expr.getLeft());
      Term _convertExprToTerm_3 = this.convertExprToTerm(expr.getRight());
      return new OrTerm(_convertExprToTerm_2, _convertExprToTerm_3);
    }
    throw new IllegalArgumentException("Unsupported expression type");
  }

  private PrimaryTerm convertPrimaryExprToPrimaryTerm(final PrimaryExpression expr) {
    if ((expr == null)) {
      throw new NullPointerException("Expression is null");
    }
    boolean _equals = "FALSE".equals(expr.getConstant());
    if (_equals) {
      return new BoolTerm(false);
    }
    boolean _equals_1 = "TRUE".equals(expr.getConstant());
    if (_equals_1) {
      return new BoolTerm(true);
    }
    TauExpression _tau = expr.getTau();
    boolean _tripleNotEquals = (_tau != null);
    if (_tripleNotEquals) {
      String _valueOf = String.valueOf(expr.getTau().getTime().getInterval());
      return new TimeTerm(_valueOf, this.attribute);
    }
    CrossVarAbbr _v = expr.getV();
    boolean _tripleNotEquals_1 = (_v != null);
    if (_tripleNotEquals_1) {
      String _name = expr.getV().getName();
      return new VarTerm(_name);
    }
    Expression _nestExpr = expr.getNestExpr();
    boolean _tripleNotEquals_2 = (_nestExpr != null);
    if (_tripleNotEquals_2) {
      Term _convertExprToTerm = this.convertExprToTerm(expr.getNestExpr());
      return new NestTerm(_convertExprToTerm);
    }
    throw new IllegalArgumentException("Unsupported primary expression type");
  }

  private UnaryTerm convertUnaryExprToUnaryTerm(final UnExpression expr) {
    if ((expr == null)) {
      throw new NullPointerException("Expression is null");
    }
    if ((expr.getUnOp().equals("NOT") || expr.getUnOp().equals("!"))) {
      XorExpression _right = expr.getRight();
      PrimaryTerm _convertPrimaryExprToPrimaryTerm = this.convertPrimaryExprToPrimaryTerm(((PrimaryExpression) _right));
      return new NotTerm(_convertPrimaryExprToPrimaryTerm);
    }
    boolean _equals = expr.getUnOp().equals("FE");
    if (_equals) {
      XorExpression _right_1 = expr.getRight();
      PrimaryTerm _convertPrimaryExprToPrimaryTerm_1 = this.convertPrimaryExprToPrimaryTerm(((PrimaryExpression) _right_1));
      return new FeTerm(_convertPrimaryExprToPrimaryTerm_1);
    }
    boolean _equals_1 = expr.getUnOp().equals("RE");
    if (_equals_1) {
      XorExpression _right_2 = expr.getRight();
      PrimaryTerm _convertPrimaryExprToPrimaryTerm_2 = this.convertPrimaryExprToPrimaryTerm(((PrimaryExpression) _right_2));
      return new ReTerm(_convertPrimaryExprToPrimaryTerm_2);
    }
    boolean _equals_2 = expr.getUnOp().equals("HIGH");
    if (_equals_2) {
      XorExpression _right_3 = expr.getRight();
      PrimaryTerm _convertPrimaryExprToPrimaryTerm_3 = this.convertPrimaryExprToPrimaryTerm(((PrimaryExpression) _right_3));
      return new HighTerm(_convertPrimaryExprToPrimaryTerm_3);
    }
    boolean _equals_3 = expr.getUnOp().equals("LOW");
    if (_equals_3) {
      XorExpression _right_4 = expr.getRight();
      PrimaryTerm _convertPrimaryExprToPrimaryTerm_4 = this.convertPrimaryExprToPrimaryTerm(((PrimaryExpression) _right_4));
      return new LowTerm(_convertPrimaryExprToPrimaryTerm_4);
    }
    throw new IllegalArgumentException("Unsupported unary expression type");
  }
}
