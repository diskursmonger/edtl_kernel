/**
 * generated by Xtext 2.34.0
 */
package su.nsk.iae.edtl.generator;

import com.google.common.collect.Iterables;
import com.opencsv.CSVWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import su.nsk.iae.edtl.edtl.Abbr;
import su.nsk.iae.edtl.edtl.AndExpression;
import su.nsk.iae.edtl.edtl.CrossVarAbbr;
import su.nsk.iae.edtl.edtl.Expression;
import su.nsk.iae.edtl.edtl.Macros;
import su.nsk.iae.edtl.edtl.Model;
import su.nsk.iae.edtl.edtl.ParamAssignmentElements;
import su.nsk.iae.edtl.edtl.PrimaryExpression;
import su.nsk.iae.edtl.edtl.Requirement;
import su.nsk.iae.edtl.edtl.TauExpression;
import su.nsk.iae.edtl.edtl.UnExpression;
import su.nsk.iae.edtl.edtl.VarList;
import su.nsk.iae.edtl.edtl.XorExpression;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class EdtlGenerator extends AbstractGenerator implements IEdtlGenerator {
  private final ArrayList<String> headerCsv = CollectionLiterals.<String>newArrayList(" ", "req name", "trigger", "invariant", "final", "delay", "reaction", "release", "LTL formula", "Substituted LTL formula");

  public static void initGenerators() {
  }

  @Override
  public void setModel(final Model model) {
    final Consumer<Requirement> _function = (Requirement x) -> {
      x.setTrigExpr(this.treeReplacement(x.getTrigExpr()));
      x.setInvExpr(this.treeReplacement(x.getInvExpr()));
      x.setFinalExpr(this.treeReplacement(x.getFinalExpr()));
      x.setDelayExpr(this.treeReplacement(x.getDelayExpr()));
      x.setReacExpr(this.treeReplacement(x.getReacExpr()));
      x.setRelExpr(this.treeReplacement(x.getRelExpr()));
    };
    model.getReqs().stream().forEach(_function);
  }

  @Override
  public void beforeGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Model model = ((Model[])Conversions.unwrapArray((Iterables.<Model>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Model.class)), Model.class))[0];
    this.setModel(model);
  }

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    try {
      StringWriter csvStringWriter = new StringWriter();
      CSVWriter csvWriter = new CSVWriter(csvStringWriter);
      csvWriter.writeNext(((String[])Conversions.unwrapArray(this.headerCsv, String.class)));
      final Model ast = ((Model[])Conversions.unwrapArray((Iterables.<Model>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Model.class)), Model.class))[0];
      final EList<Requirement> reqs = ast.getReqs();
      String globalTimeInterval = ast.getGlobInterval().getGlobInterval().getInterval();
      int reqNum = 1;
      for (final Requirement req : reqs) {
        {
          Expression _trigExpr = req.getTrigExpr();
          BoolTerm _boolTerm = new BoolTerm(true);
          Term trigger = ExprToTermConverter.convertOrDefault(_trigExpr, Attribute.TRIGGER, _boolTerm);
          Expression _invExpr = req.getInvExpr();
          BoolTerm _boolTerm_1 = new BoolTerm(true);
          Term invariant = ExprToTermConverter.convertOrDefault(_invExpr, Attribute.INVARIANT, _boolTerm_1);
          Expression _finalExpr = req.getFinalExpr();
          BoolTerm _boolTerm_2 = new BoolTerm(false);
          Term fin = ExprToTermConverter.convertOrDefault(_finalExpr, Attribute.FINAL, _boolTerm_2);
          Expression _delayExpr = req.getDelayExpr();
          BoolTerm _boolTerm_3 = new BoolTerm(false);
          Term delay = ExprToTermConverter.convertOrDefault(_delayExpr, Attribute.DELAY, _boolTerm_3);
          Expression _reacExpr = req.getReacExpr();
          BoolTerm _boolTerm_4 = new BoolTerm(true);
          Term reaction = ExprToTermConverter.convertOrDefault(_reacExpr, Attribute.REACTION, _boolTerm_4);
          Expression _relExpr = req.getRelExpr();
          BoolTerm _boolTerm_5 = new BoolTerm(false);
          Term release = ExprToTermConverter.convertOrDefault(_relExpr, Attribute.RELEASE, _boolTerm_5);
          final Term x0 = this.con(trigger, this.no(release));
          final Term x1 = this.con(invariant, reaction);
          final Term x2 = this.dis(release, x1);
          final Term x3 = this.con(invariant, this.no(delay));
          final Term x4 = this.until(x3, x2);
          final Term x5 = this.con(fin, x4);
          final Term x6 = this.dis(release, x5);
          final Term x7 = this.con(invariant, this.no(fin));
          final Term x8 = this.until(x7, x6);
          final Term x9 = this.impl(x0, x8);
          final Term ltl_formula = this.globally(x9);
          String _name = req.getName();
          String _plus = ("\nRequirement " + _name);
          String _plus_1 = (_plus + ":\n");
          String _plus_2 = (_plus_1 + 
            "trigger: ");
          String _convertExprToStringOrDefault = this.convertExprToStringOrDefault(req.getTrigExpr(), "true");
          String _plus_3 = (_plus_2 + _convertExprToStringOrDefault);
          String _plus_4 = (_plus_3 + "\n");
          String _plus_5 = (_plus_4 + 
            "invariant: ");
          String _convertExprToStringOrDefault_1 = this.convertExprToStringOrDefault(req.getInvExpr(), "true");
          String _plus_6 = (_plus_5 + _convertExprToStringOrDefault_1);
          String _plus_7 = (_plus_6 + "\n");
          String _plus_8 = (_plus_7 + 
            "final: ");
          String _convertExprToStringOrDefault_2 = this.convertExprToStringOrDefault(req.getFinalExpr(), "false");
          String _plus_9 = (_plus_8 + _convertExprToStringOrDefault_2);
          String _plus_10 = (_plus_9 + "\n");
          String _plus_11 = (_plus_10 + 
            "delay: ");
          String _convertExprToStringOrDefault_3 = this.convertExprToStringOrDefault(req.getDelayExpr(), "false");
          String _plus_12 = (_plus_11 + _convertExprToStringOrDefault_3);
          String _plus_13 = (_plus_12 + "\n");
          String _plus_14 = (_plus_13 + 
            "reaction: ");
          String _convertExprToStringOrDefault_4 = this.convertExprToStringOrDefault(req.getReacExpr(), "true");
          String _plus_15 = (_plus_14 + _convertExprToStringOrDefault_4);
          String _plus_16 = (_plus_15 + "\n");
          String _plus_17 = (_plus_16 + 
            "release: ");
          String _convertExprToStringOrDefault_5 = this.convertExprToStringOrDefault(req.getRelExpr(), "false");
          String _plus_18 = (_plus_17 + _convertExprToStringOrDefault_5);
          String _plus_19 = (_plus_18 + "\n\n");
          String _plus_20 = (_plus_19 + 
            "LTL formula:\n");
          String _convertTermToString = this.convertTermToString(ltl_formula, Boolean.valueOf(false));
          String _plus_21 = (_plus_20 + _convertTermToString);
          String out = (_plus_21 + "\n");
          System.out.println(out);
          final ArrayList<String> csvRow = CollectionLiterals.<String>newArrayList(Integer.valueOf(reqNum).toString(), req.getName(), 
            TermToStringConverter.convert(trigger, globalTimeInterval, TimeRepresentation.PASSED), 
            TermToStringConverter.convert(invariant, globalTimeInterval, TimeRepresentation.PASSED), 
            TermToStringConverter.convert(fin, globalTimeInterval, TimeRepresentation.PASSED), 
            TermToStringConverter.convert(delay, globalTimeInterval, TimeRepresentation.PASSED), 
            TermToStringConverter.convert(reaction, globalTimeInterval, TimeRepresentation.PASSED), 
            TermToStringConverter.convert(release, globalTimeInterval, TimeRepresentation.PASSED), 
            TermToStringConverter.convert(ltl_formula, globalTimeInterval, TimeRepresentation.PASSED), 
            TermToStringConverter.convert(ltl_formula, globalTimeInterval, TimeRepresentation.INTERVAL));
          csvWriter.writeNext(((String[])Conversions.unwrapArray(csvRow, String.class)));
          reqNum++;
        }
      }
      csvWriter.close();
      String csv = csvStringWriter.toString();
      fsa.generateFile("ltl_output.csv", csv);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  private String convertTermToString(final Term term, final Boolean value) {
    if ((term instanceof AndTerm)) {
      String _convertTermToString = this.convertTermToString(((AndTerm)term).left, value);
      String _plus = ("(" + _convertTermToString);
      String _plus_1 = (_plus + " ∧ ");
      String _convertTermToString_1 = this.convertTermToString(((AndTerm)term).right, value);
      String _plus_2 = (_plus_1 + _convertTermToString_1);
      return (_plus_2 + ")");
    }
    if ((term instanceof OrTerm)) {
      String _convertTermToString_2 = this.convertTermToString(((OrTerm)term).left, value);
      String _plus_3 = ("(" + _convertTermToString_2);
      String _plus_4 = (_plus_3 + " ∨ ");
      String _convertTermToString_3 = this.convertTermToString(((OrTerm)term).right, value);
      String _plus_5 = (_plus_4 + _convertTermToString_3);
      return (_plus_5 + ")");
    }
    if ((term instanceof ImplTerm)) {
      String _convertTermToString_4 = this.convertTermToString(((ImplTerm)term).left, value);
      String _plus_6 = ("(" + _convertTermToString_4);
      String _plus_7 = (_plus_6 + " → ");
      String _convertTermToString_5 = this.convertTermToString(((ImplTerm)term).right, value);
      String _plus_8 = (_plus_7 + _convertTermToString_5);
      return (_plus_8 + ")");
    }
    if ((term instanceof WTerm)) {
      String _convertTermToString_6 = this.convertTermToString(((WTerm)term).term, value);
      String _plus_9 = ("W(" + _convertTermToString_6);
      return (_plus_9 + ")");
    }
    if ((term instanceof FTerm)) {
      String _convertTermToString_7 = this.convertTermToString(((FTerm)term).term, value);
      String _plus_10 = ("F(" + _convertTermToString_7);
      return (_plus_10 + ")");
    }
    if ((term instanceof GTerm)) {
      String _convertTermToString_8 = this.convertTermToString(((GTerm)term).term, value);
      String _plus_11 = ("G(" + _convertTermToString_8);
      return (_plus_11 + ")");
    }
    if ((term instanceof UTerm)) {
      String _convertTermToString_9 = this.convertTermToString(((UTerm)term).left, value);
      String _plus_12 = ("(" + _convertTermToString_9);
      String _plus_13 = (_plus_12 + " U ");
      String _convertTermToString_10 = this.convertTermToString(((UTerm)term).right, value);
      String _plus_14 = (_plus_13 + _convertTermToString_10);
      return (_plus_14 + ")");
    }
    if ((term instanceof BoolTerm)) {
      return String.valueOf(((BoolTerm)term).value);
    }
    if ((term instanceof VarTerm)) {
      return ((VarTerm)term).name;
    }
    if ((term instanceof TimeTerm)) {
      if (((value).booleanValue() == false)) {
        String _valueOf = String.valueOf(((TimeTerm)term).interval);
        String _plus_15 = ("passed(" + _valueOf);
        return (_plus_15 + ")");
      } else {
        String _valueOf_1 = String.valueOf(((TimeTerm)term).interval);
        String _plus_16 = ("passed(" + _valueOf_1);
        return (_plus_16 + ")");
      }
    }
    if ((term instanceof NestTerm)) {
      String _convertTermToString_11 = this.convertTermToString(((NestTerm)term).term, value);
      String _plus_17 = ("(" + _convertTermToString_11);
      return (_plus_17 + ")");
    }
    if ((term instanceof NotTerm)) {
      String _convertTermToString_12 = this.convertTermToString(((NotTerm)term).term, value);
      return ("¬" + _convertTermToString_12);
    }
    if ((term instanceof FeTerm)) {
      String _convertTermToString_13 = this.convertTermToString(((FeTerm)term).term, value);
      String _plus_18 = ("FE(" + _convertTermToString_13);
      return (_plus_18 + ")");
    }
    if ((term instanceof ReTerm)) {
      String _convertTermToString_14 = this.convertTermToString(((ReTerm)term).term, value);
      String _plus_19 = ("RE(" + _convertTermToString_14);
      return (_plus_19 + ")");
    }
    if ((term instanceof HighTerm)) {
      String _convertTermToString_15 = this.convertTermToString(((HighTerm)term).term, value);
      String _plus_20 = ("HIGH(" + _convertTermToString_15);
      return (_plus_20 + ")");
    }
    if ((term instanceof LowTerm)) {
      String _convertTermToString_16 = this.convertTermToString(((LowTerm)term).term, value);
      String _plus_21 = ("LOW(" + _convertTermToString_16);
      return (_plus_21 + ")");
    }
    throw new IllegalArgumentException("Unsupported term type");
  }

  private String convertExprToStringOrDefault(final Expression expr, final String defaultString) {
    String _xifexpression = null;
    if ((expr != null)) {
      _xifexpression = this.convertExprToString(expr);
    } else {
      _xifexpression = defaultString;
    }
    return _xifexpression;
  }

  private String convertExprToString(final Expression expr) {
    if ((expr instanceof PrimaryExpression)) {
      boolean _equals = "FALSE".equals(((PrimaryExpression)expr).getConstant());
      if (_equals) {
        return "false";
      }
      boolean _equals_1 = "TRUE".equals(((PrimaryExpression)expr).getConstant());
      if (_equals_1) {
        return "true";
      }
      TauExpression _tau = ((PrimaryExpression)expr).getTau();
      boolean _tripleNotEquals = (_tau != null);
      if (_tripleNotEquals) {
        String _interval = ((PrimaryExpression)expr).getTau().getTime().getInterval();
        String _plus = ("passed(" + _interval);
        return (_plus + ")");
      }
      CrossVarAbbr _v = ((PrimaryExpression)expr).getV();
      boolean _tripleNotEquals_1 = (_v != null);
      if (_tripleNotEquals_1) {
        return ((PrimaryExpression)expr).getV().getName();
      }
      Expression _nestExpr = ((PrimaryExpression)expr).getNestExpr();
      boolean _tripleNotEquals_2 = (_nestExpr != null);
      if (_tripleNotEquals_2) {
        String _convertExprToString = this.convertExprToString(((PrimaryExpression)expr).getNestExpr());
        String _plus_1 = ("(" + _convertExprToString);
        return (_plus_1 + ")");
      }
      throw new IllegalArgumentException("Unsupported primary expression type");
    }
    if ((expr instanceof UnExpression)) {
      if ((((UnExpression)expr).getUnOp().equals("NOT") || ((UnExpression)expr).getUnOp().equals("!"))) {
        String _convertExprToString_1 = this.convertExprToString(((UnExpression)expr).getRight());
        return ("¬" + _convertExprToString_1);
      }
      boolean _equals_2 = ((UnExpression)expr).getUnOp().equals("FE");
      if (_equals_2) {
        String _convertExprToString_2 = this.convertExprToString(((UnExpression)expr).getRight());
        String _plus_2 = ("FE(" + _convertExprToString_2);
        return (_plus_2 + ")");
      }
      boolean _equals_3 = ((UnExpression)expr).getUnOp().equals("RE");
      if (_equals_3) {
        String _convertExprToString_3 = this.convertExprToString(((UnExpression)expr).getRight());
        String _plus_3 = ("RE(" + _convertExprToString_3);
        return (_plus_3 + ")");
      }
      boolean _equals_4 = ((UnExpression)expr).getUnOp().equals("HIGH");
      if (_equals_4) {
        String _convertExprToString_4 = this.convertExprToString(((UnExpression)expr).getRight());
        String _plus_4 = ("HIGH(" + _convertExprToString_4);
        return (_plus_4 + ")");
      }
      boolean _equals_5 = ((UnExpression)expr).getUnOp().equals("LOW");
      if (_equals_5) {
        String _convertExprToString_5 = this.convertExprToString(((UnExpression)expr).getRight());
        String _plus_5 = ("LOW(" + _convertExprToString_5);
        return (_plus_5 + ")");
      }
    }
    if ((expr instanceof AndExpression)) {
      String _convertExprToString_6 = this.convertExprToString(((AndExpression)expr).getLeft());
      String _plus_6 = ("(" + _convertExprToString_6);
      String _plus_7 = (_plus_6 + " ∧ ");
      String _convertExprToString_7 = this.convertExprToString(((AndExpression)expr).getRight());
      String _plus_8 = (_plus_7 + _convertExprToString_7);
      return (_plus_8 + ")");
    }
    String _orOp = expr.getOrOp();
    boolean _tripleNotEquals_3 = (_orOp != null);
    if (_tripleNotEquals_3) {
      String _convertExprToString_8 = this.convertExprToString(expr.getLeft());
      String _plus_9 = ("(" + _convertExprToString_8);
      String _plus_10 = (_plus_9 + " ∨ ");
      String _convertExprToString_9 = this.convertExprToString(expr.getRight());
      String _plus_11 = (_plus_10 + _convertExprToString_9);
      return (_plus_11 + ")");
    }
    throw new IllegalArgumentException("Unexpected expression type");
  }

  private Term con(final Term l, final Term r) {
    Term left = l.copy();
    Term right = r.copy();
    if ((left instanceof BoolTerm)) {
      if (((BoolTerm)left).value) {
        return right;
      } else {
        return left;
      }
    }
    if ((right instanceof BoolTerm)) {
      if (((BoolTerm)right).value) {
        return left;
      } else {
        return right;
      }
    }
    return new AndTerm(left, right);
  }

  private Term dis(final Term l, final Term r) {
    Term left = l.copy();
    Term right = r.copy();
    if ((left instanceof BoolTerm)) {
      if (((BoolTerm)left).value) {
        return left;
      } else {
        return right;
      }
    }
    if ((right instanceof BoolTerm)) {
      if (((BoolTerm)right).value) {
        return right;
      } else {
        return left;
      }
    }
    boolean _equals = left.equals(right);
    if (_equals) {
      return left;
    }
    if ((right instanceof AndTerm)) {
      Term right_r = ((AndTerm)right).right;
      if ((right_r instanceof OrTerm)) {
        boolean _equals_1 = ((OrTerm)right_r).left.equals(left);
        if (_equals_1) {
          AndTerm _andTerm = new AndTerm(((AndTerm)right).left, ((OrTerm)right_r).right);
          return new OrTerm(left, _andTerm);
        }
      }
    }
    if ((right instanceof FTerm)) {
      Term right_t = ((FTerm)right).term;
      if ((right_t instanceof OrTerm)) {
        boolean _equals_2 = left.equals(((OrTerm)right_t).left);
        if (_equals_2) {
          return right;
        }
      }
    }
    if ((right instanceof UTerm)) {
      Term right_r_1 = ((UTerm)right).right;
      boolean _equals_3 = right_r_1.equals(left);
      if (_equals_3) {
        return right;
      }
    }
    if ((left instanceof GTerm)) {
      Term left_t = ((GTerm)left).term;
      if ((left_t instanceof NotTerm)) {
        if ((right instanceof FTerm)) {
          boolean _equals_4 = ((NotTerm)left_t).term.equals(((FTerm)right).term);
          if (_equals_4) {
            return new BoolTerm(true);
          }
        }
      }
    }
    if ((right instanceof FTerm)) {
      boolean _equals_5 = ((FTerm)right).term.equals(left);
      if (_equals_5) {
        return right;
      }
    }
    if ((right instanceof OrTerm)) {
      if ((((OrTerm)right).left.equals(left) || ((OrTerm)right).right.equals(left))) {
        return right;
      }
    }
    if ((left instanceof GTerm)) {
      Term left_t_1 = ((GTerm)left).term;
      if ((left_t_1 instanceof NotTerm)) {
        if ((right instanceof OrTerm)) {
          Term right_l = ((OrTerm)right).left;
          if ((right_l instanceof FTerm)) {
            boolean _equals_6 = ((NotTerm)left_t_1).term.equals(((FTerm)right_l).term);
            if (_equals_6) {
              return ((OrTerm)right).right;
            }
          }
        }
      }
    }
    if ((right instanceof UTerm)) {
      Term right_r_2 = ((UTerm)right).right;
      if ((right_r_2 instanceof OrTerm)) {
        boolean _equals_7 = ((OrTerm)right_r_2).left.equals(left);
        if (_equals_7) {
          return right;
        }
      }
    }
    return new OrTerm(left, right);
  }

  private Term until(final Term l, final Term r) {
    Term left = l.copy();
    Term right = r.copy();
    if ((right instanceof BoolTerm)) {
      return right;
    }
    if ((left instanceof BoolTerm)) {
      if (((BoolTerm)left).value) {
        return this.future(right);
      } else {
        return right;
      }
    }
    boolean _equals = left.equals(right);
    if (_equals) {
      return left;
    }
    if ((left instanceof NotTerm)) {
      boolean _equals_1 = ((NotTerm)left).term.equals(right);
      if (_equals_1) {
        return this.future(right);
      }
    }
    if ((left instanceof NotTerm)) {
      if ((right instanceof OrTerm)) {
        boolean _equals_2 = ((NotTerm)left).term.equals(((OrTerm)right).right);
        if (_equals_2) {
          return this.dis(this.future(((NotTerm)left).term), this.until(left, ((OrTerm)right).left));
        }
      }
    }
    if ((left instanceof AndTerm)) {
      if ((right instanceof OrTerm)) {
        boolean _equals_3 = ((AndTerm)left).left.equals(((OrTerm)right).right);
        if (_equals_3) {
          return this.dis(((AndTerm)left).left, this.until(left, ((OrTerm)right).left));
        }
      }
    }
    if ((left instanceof AndTerm)) {
      boolean _equals_4 = ((AndTerm)left).left.equals(right);
      if (_equals_4) {
        return right;
      }
    }
    if ((right instanceof OrTerm)) {
      boolean _equals_5 = left.equals(((OrTerm)right).right);
      if (_equals_5) {
        return this.dis(left, this.until(left, ((OrTerm)right).left));
      }
    }
    if ((left instanceof AndTerm)) {
      if ((right instanceof AndTerm)) {
        boolean _equals_6 = ((AndTerm)left).left.equals(((AndTerm)right).right);
        if (_equals_6) {
          Term left_r = ((AndTerm)left).right;
          if ((left_r instanceof NotTerm)) {
            boolean _equals_7 = ((NotTerm)left_r).term.equals(((AndTerm)right).left);
            if (_equals_7) {
              return this.until(((AndTerm)left).left, right);
            }
          }
        }
      }
    }
    return new UTerm(left, right);
  }

  private Term impl(final Term l, final Term r) {
    Term left = l.copy();
    Term right = r.copy();
    if (((left instanceof BoolTerm) || (right instanceof BoolTerm))) {
      return this.dis(this.no(left), right);
    }
    return new ImplTerm(left, right);
  }

  private Term future(final Term term) {
    Term t = term.copy();
    if ((t instanceof BoolTerm)) {
      return t;
    }
    return new FTerm(t);
  }

  private Term no(final Term term) {
    Term t = term.copy();
    if ((t instanceof NotTerm)) {
      return ((NotTerm)t).term;
    }
    if ((t instanceof BoolTerm)) {
      ((BoolTerm)t).value = (!((BoolTerm)t).value);
      return t;
    }
    return new NotTerm(t);
  }

  private Term globally(final Term term) {
    Term t = term.copy();
    if ((t instanceof BoolTerm)) {
      return t;
    }
    if ((t instanceof GTerm)) {
      return this.globally(((GTerm)t).term);
    }
    if ((t instanceof OrTerm)) {
      Term t_left = ((OrTerm)t).left;
      if ((t_left instanceof GTerm)) {
        Term t_right = ((OrTerm)t).right;
        if ((t_right instanceof UTerm)) {
          Term t_right_right = ((UTerm)t_right).right;
          if ((t_right_right instanceof AndTerm)) {
            Term t_left_term = ((GTerm)t_left).term;
            if ((t_left_term instanceof AndTerm)) {
              boolean _equals = ((AndTerm)t_left_term).left.equals(((UTerm)t_right).left);
              if (_equals) {
                boolean _equals_1 = ((UTerm)t_right).left.equals(((AndTerm)t_right_right).right);
                if (_equals_1) {
                  Term t_left_term_right = ((AndTerm)t_left_term).right;
                  if ((t_left_term_right instanceof NotTerm)) {
                    boolean _equals_2 = ((NotTerm)t_left_term_right).term.equals(((AndTerm)t_right_right).left);
                    if (_equals_2) {
                      return this.globally(((AndTerm)t_left_term).left);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if ((t instanceof OrTerm)) {
      Term t_left_1 = ((OrTerm)t).left;
      if ((t_left_1 instanceof GTerm)) {
        Term t_right_1 = ((OrTerm)t).right;
        if ((t_right_1 instanceof UTerm)) {
          boolean _equals_3 = ((GTerm)t_left_1).term.equals(((UTerm)t_right_1).left);
          if (_equals_3) {
            Term t_right_right_1 = ((UTerm)t_right_1).right;
            if ((t_right_right_1 instanceof AndTerm)) {
              Term t_right_right_right = ((AndTerm)t_right_right_1).right;
              if ((t_right_right_right instanceof UTerm)) {
                Term t_right_right_right_right = ((UTerm)t_right_right_right).right;
                if ((t_right_right_right_right instanceof AndTerm)) {
                  Term t_right_left = ((UTerm)t_right_1).left;
                  if ((t_right_left instanceof AndTerm)) {
                    boolean _equals_4 = ((AndTerm)t_right_left).left.equals(((UTerm)t_right_right_right).left);
                    if (_equals_4) {
                      boolean _equals_5 = ((AndTerm)t_right_left).left.equals(((AndTerm)t_right_right_right_right).left);
                      if (_equals_5) {
                        Term t_right_left_right = ((AndTerm)t_right_left).right;
                        if ((t_right_left_right instanceof NotTerm)) {
                          boolean _equals_6 = ((NotTerm)t_right_left_right).term.equals(((AndTerm)t_right_right_1).left);
                          if (_equals_6) {
                            return this.globally(
                              this.con(
                                ((AndTerm)t_right_left).left, 
                                this.dis(
                                  this.globally(t_right_left_right), 
                                  this.future(
                                    this.con(
                                      ((AndTerm)t_right_right_1).left, 
                                      this.future(((AndTerm)t_right_right_right_right).right))))));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if ((t instanceof OrTerm)) {
      Term t_right_2 = ((OrTerm)t).right;
      if ((t_right_2 instanceof UTerm)) {
        Term t_left_2 = ((OrTerm)t).left;
        if ((t_left_2 instanceof GTerm)) {
          Term t_left_term_1 = ((GTerm)t_left_2).term;
          if ((t_left_term_1 instanceof AndTerm)) {
            Term t_right_left_1 = ((UTerm)t_right_2).left;
            if ((t_right_left_1 instanceof AndTerm)) {
              boolean _equals_7 = ((AndTerm)t_left_term_1).equals(t_right_left_1);
              if (_equals_7) {
                Term t_right_right_2 = ((UTerm)t_right_2).right;
                if ((t_right_right_2 instanceof AndTerm)) {
                  Term t_right_right_right_1 = ((AndTerm)t_right_right_2).right;
                  if ((t_right_right_right_1 instanceof AndTerm)) {
                    Term t_right_left_right_1 = ((AndTerm)t_right_left_1).right;
                    if ((t_right_left_right_1 instanceof NotTerm)) {
                      boolean _equals_8 = ((NotTerm)t_right_left_right_1).term.equals(((AndTerm)t_right_right_2).left);
                      if (_equals_8) {
                        boolean _equals_9 = ((AndTerm)t_right_left_1).left.equals(((AndTerm)t_right_right_right_1).left);
                        if (_equals_9) {
                          return this.globally(
                            this.con(
                              ((AndTerm)t_right_left_1).left, 
                              this.dis(
                                this.globally(t_right_left_right_1), 
                                this.future(this.con(((AndTerm)t_right_right_2).left, ((AndTerm)t_right_right_right_1).right)))));
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if ((t instanceof OrTerm)) {
      Term t_left_3 = ((OrTerm)t).left;
      if ((t_left_3 instanceof GTerm)) {
        Term t_right_3 = ((OrTerm)t).right;
        if ((t_right_3 instanceof UTerm)) {
          boolean _equals_10 = ((GTerm)t_left_3).term.equals(((UTerm)t_right_3).left);
          if (_equals_10) {
            return this.globally(this.con(((GTerm)t_left_3).term, this.future(((UTerm)t_right_3).right)));
          }
        }
      }
    }
    return new GTerm(t);
  }

  /**
   * ======================= TREE TRAVERSAL =======================
   */
  public Expression treeReplacement(final Expression expr) {
    return this.treeReplacement_Traversal(expr);
  }

  public Expression treeReplacement_Traversal(final Expression expr) {
    if ((expr == null)) {
      return expr;
    }
    Expression e = expr;
    e.setLeft(this.treeReplacement_Traversal(expr.getLeft()));
    Expression _treeReplacement_Traversal = this.treeReplacement_Traversal(expr.getRight());
    e.setRight(((XorExpression) _treeReplacement_Traversal));
    if ((expr instanceof PrimaryExpression)) {
      final PrimaryExpression el = ((PrimaryExpression) expr);
      CrossVarAbbr _v = el.getV();
      if ((_v instanceof Abbr)) {
        final CrossVarAbbr abbr = el.getV();
        final Model model = EcoreUtil2.<Model>getContainerOfType(expr, Model.class);
        for (int i = 0; (i < model.getAbbrs().size()); i++) {
          boolean _equals = model.getAbbrs().get(i).getName().equals(abbr.getName());
          if (_equals) {
            return EcoreUtil.<Expression>copy(model.getAbbrs().get(i).getExpr());
          }
        }
      } else {
        Macros _macros = el.getMacros();
        if ((_macros instanceof Macros)) {
          Macros _copy = EcoreUtil.<Macros>copy(el.getMacros());
          final Macros macros = ((Macros) _copy);
          final VarList args = EcoreUtil.<VarList>copy(macros.getArgs());
          HashMap<String, Expression> replace = new HashMap<String, Expression>();
          ParamAssignmentElements vars = EcoreUtil.<ParamAssignmentElements>copy(el.getArgs());
          for (int i = 0; (i < args.getVars().size()); i++) {
            CrossVarAbbr _get = vars.getElements().get(i);
            if ((_get instanceof Abbr)) {
              final CrossVarAbbr abbr_1 = vars.getElements().get(i);
              final Model model_1 = EcoreUtil2.<Model>getContainerOfType(expr, Model.class);
              for (int j = 0; (j < model_1.getAbbrs().size()); j++) {
                boolean _equals = model_1.getAbbrs().get(j).getName().equals(abbr_1.getName());
                if (_equals) {
                  replace.put(args.getVars().get(i).getName(), 
                    EcoreUtil.<Expression>copy(model_1.getAbbrs().get(j).getExpr()));
                }
              }
            } else {
              PrimaryExpression prExpr = EcoreUtil.<PrimaryExpression>copy(((PrimaryExpression)expr));
              prExpr.setMacros(null);
              prExpr.setArgs(null);
              prExpr.setV(vars.getElements().get(i));
              replace.put(args.getVars().get(i).getName(), prExpr);
            }
          }
          return this.treeReplacement_MacrosTraversal(macros.getExpr(), replace);
        } else {
          return el;
        }
      }
    }
    return e;
  }

  public Expression treeReplacement_MacrosTraversal(final Expression expr, final HashMap<String, Expression> replace) {
    if ((expr == null)) {
      return EcoreUtil.<Expression>copy(expr);
    }
    Expression e = EcoreUtil.<Expression>copy(expr);
    if ((expr instanceof PrimaryExpression)) {
      Expression exp = replace.get(((PrimaryExpression)expr).getV().getName());
      if ((exp != null)) {
        return EcoreUtil.<Expression>copy(exp);
      } else {
        return EcoreUtil.<PrimaryExpression>copy(((PrimaryExpression)expr));
      }
    }
    if ((expr instanceof UnExpression)) {
      Expression _treeReplacement_MacrosTraversal = this.treeReplacement_MacrosTraversal(((UnExpression)expr).getRight(), replace);
      e.setRight(((XorExpression) _treeReplacement_MacrosTraversal));
      return EcoreUtil.<Expression>copy(e);
    }
    e.setLeft(this.treeReplacement_MacrosTraversal(expr.getLeft(), replace));
    Expression _treeReplacement_MacrosTraversal_1 = this.treeReplacement_MacrosTraversal(expr.getRight(), replace);
    e.setRight(((XorExpression) _treeReplacement_MacrosTraversal_1));
    return EcoreUtil.<Expression>copy(e);
  }
}
