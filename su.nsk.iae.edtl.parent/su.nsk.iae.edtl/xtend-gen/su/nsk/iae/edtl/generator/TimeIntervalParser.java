/**
 * generated by Xtext 2.34.0
 */
package su.nsk.iae.edtl.generator;

import java.time.Duration;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@SuppressWarnings("all")
public class TimeIntervalParser {
  private static Pattern timeIntervalPattern = Pattern.compile("^(\\d+d)?(\\d+h)?(\\d+m)?(\\d+s)?(\\d+ms)?$");

  private static Map<String, Long> timeUnitToMillis = Map.<String, Long>of(
    "d", Long.valueOf(Duration.ofDays(1).toMillis()), 
    "h", Long.valueOf(Duration.ofHours(1).toMillis()), 
    "m", Long.valueOf(Duration.ofMinutes(1).toMillis()), 
    "s", Long.valueOf(Duration.ofSeconds(1).toMillis()), 
    "ms", Long.valueOf(Duration.ofMillis(1).toMillis()));

  public static long parseTimeIntervalToMillis(final String timeInterval) {
    Matcher matcher = TimeIntervalParser.timeIntervalPattern.matcher(timeInterval.trim());
    boolean _matches = matcher.matches();
    boolean _not = (!_matches);
    if (_not) {
      throw new IllegalArgumentException("Time interval has unexpected format");
    }
    long timeIntervalMillis = 0;
    for (int groupIndex = 1; (groupIndex <= matcher.groupCount()); groupIndex++) {
      {
        String timeIntervalPart = matcher.group(groupIndex);
        if ((timeIntervalPart != null)) {
          long timeIntervalPartMillis = TimeIntervalParser.parseTimeIntervalPartToMillis(timeIntervalPart);
          long _timeIntervalMillis = timeIntervalMillis;
          timeIntervalMillis = (_timeIntervalMillis + timeIntervalPartMillis);
        }
      }
    }
    return timeIntervalMillis;
  }

  private static long parseTimeIntervalPartToMillis(final String timeIntervalPart) {
    long amount = (Long.valueOf(timeIntervalPart.replaceAll("\\D+", ""))).longValue();
    String timeUnit = timeIntervalPart.replaceAll("\\d+", "");
    Long _get = TimeIntervalParser.timeUnitToMillis.get(timeUnit);
    return (amount * (_get).longValue());
  }
}
